const SosReport = require('../models/SosReport');
const SosHelper = require('../models/SosHelper');
const SosTags = require('../models/SosTag');
const mongoose = require('mongoose');
const axios = require('axios');
const CancellationReasons = require('../models/SosCancellationReason')
const SosConfirmedHelper = require('../models/SosConfirmedHelper')

const USER_SERVICE_URL = 'http://89.108.118.249:5001/api/users/profile';


  // üìå –°–æ–∑–¥–∞–Ω–∏–µ SOS-—Å–∏–≥–Ω–∞–ª–∞
  exports.createSosSignal = async (req, res) => {
    try {
      console.log("üì© –î–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", req.body);
      console.log("üì∑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (Multer):", req.files); // ‚úÖ –§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–¥–µ—Å—å
      const userId = req.user.id;
      const { location, tags, title, description } = req.body;
      if (!userId || !location || !title || !tags || tags.length === 0) {
        return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
      }
      const tagObjects = await SosTags.find({ _id: { $in: tags } }, '_id');
      const tagIds = tagObjects.map(tag => tag._id);
      if (tagIds.length !== tags.length) {
        return res.status(400).json({ error: '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ' });
      }
      // ‚úÖ –¢–µ–ø–µ—Ä—å `req.files` —É–∂–µ –º–∞—Å—Å–∏–≤, –ø—Ä–æ—Å—Ç–æ –º–∞–ø–ø–∏–º `path`
      const photos = req.files ? req.files.map(file => file.path) : [];
      const newSos = new SosReport({
        userId: new mongoose.Types.ObjectId(userId),
        location,
        tags: tagIds,
        title,
        description,
        photos // ‚úÖ –¢–µ–ø–µ—Ä—å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
      });
      await newSos.save();
      console.log("‚úÖ SOS-—Å–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:", newSos);
      res.status(201).json({ message: 'SOS-—Å–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω', sos: newSos });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ SOS-—Å–∏–≥–Ω–∞–ª–∞:", error);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SOS-—Å–∏–≥–Ω–∞–ª–∞', details: error.message });
    }
  };

  // üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SOS-—Å–∏–≥–Ω–∞–ª–∞
  exports.updateSosSignal = async (req, res) => {
    try {
      const { sosId } = req.params;
      const userId = req.user.id;
      const { title, description, location, tags, existingPhotos } = req.body;

      console.log("üì© –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", req.body);

      if (!mongoose.Types.ObjectId.isValid(sosId)) {
        return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID" });
      }

      const sosSignal = await SosReport.findById(sosId);
      if (!sosSignal) {
        return res.status(404).json({ error: "SOS-—Å–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (sosSignal.userId.toString() !== userId) {
        return res.status(403).json({ error: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª" });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      sosSignal.title = title || sosSignal.title;
      sosSignal.description = description || sosSignal.description;
      sosSignal.location = location || sosSignal.location;
      sosSignal.tags = tags || sosSignal.tags;

      // 1Ô∏è‚É£ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ**
      let finalPhotos = existingPhotos ? JSON.parse(existingPhotos) : sosSignal.photos;

      // 2Ô∏è‚É£ **–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ**
      if (req.files && req.files.length > 0) {
        const newPhotos = req.files.map(file => file.path);
        finalPhotos = [...finalPhotos, ...newPhotos];
      }
      sosSignal.photos = finalPhotos;
      await sosSignal.save();
      console.log("‚úÖ SOS-—Å–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω:", sosSignal);
      res.json({ message: "SOS-—Å–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω", sos: sosSignal });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ SOS-—Å–∏–≥–Ω–∞–ª–∞:", error.message);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ SOS-—Å–∏–≥–Ω–∞–ª–∞" });
    }
  };

  // üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö SOS-—Å–∏–≥–Ω–∞–ª–æ–≤
  exports.getSosSignals = async (req, res) => {
    try {
      const sosReports = await SosReport.find().populate('tags').populate('userId', 'username email');
      res.json(sosReports);
    } catch (error) {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SOS-—Å–∏–≥–Ω–∞–ª–æ–≤' });
    }
  };

  exports.getSosTags = async (req, res) => {
    try {
      const sosTags = await SosTags.find();
      res.json(sosTags)
    } catch (error) {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SOS-—Ç—ç–≥–æ–≤' })
    }
  };

  exports.getCancellationReasons = async (req, res) => {
    try {
      const cancellationReasons = await CancellationReasons.find();
      res.json(cancellationReasons)
    } catch (error){
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏—á–∏–Ω –æ—Ç–º–µ–Ω—ã' })
    }
  };

  // üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ SOS-—Å–∏–≥–Ω–∞–ª–∞ –ø–æ ID
  exports.getSosSignalById = async (req, res) => {
    try {
      const { sosId } = req.params;
      console.log("üì° –ü–æ–ª—É—á–∞–µ–º SOS-—Å–∏–≥–Ω–∞–ª —Å ID:", sosId);
      if (!mongoose.Types.ObjectId.isValid(sosId)) {
        console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ObjectId");
        return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID" });
      }
      // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–∞–º SOS-—Å–∏–≥–Ω–∞–ª (–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ)
      const sosReport = await SosReport.findById(sosId).populate('tags', 'name');

      if (!sosReport) {
        console.error("‚ùå –û—à–∏–±–∫–∞: SOS-—Å–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!");
        return res.status(404).json({ error: "SOS-—Å–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      // 2Ô∏è‚É£ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ `user-service`
      let userData = null;
      try {
        const userResponse = await axios.get(`http://89.108.118.249:5001/api/users/profile/${sosReport.userId}`);
        console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userResponse.data); // <--- –õ–û–ì–ò–†–£–ï–ú –û–¢–í–ï–¢
        userData = userResponse.data;
      } catch (err) {
        console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ user-service:", err.message);
      }

      // 3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      res.json({ ...sosReport.toObject(), user: userData });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SOS-—Å–∏–≥–Ω–∞–ª–∞:", error.message);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SOS-—Å–∏–≥–Ω–∞–ª–∞", details: error.message });
    }
  };

  // üìå –£–¥–∞–ª–µ–Ω–∏–µ SOS-—Å–∏–≥–Ω–∞–ª–∞ (–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä)
  exports.cancelSosSignal = async (req, res) => {
    try {
      const { sosId } = req.params;
      const { reasonId } = req.body;
      const userId = req.user.id;

      if (!mongoose.Types.ObjectId.isValid(sosId) || !mongoose.Types.ObjectId.isValid(reasonId)) {
        return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID" });
      }
      const sosReport = await SosReport.findById(sosId);
      if (!sosReport) {
        return res.status(404).json({ error: "SOS-—Å–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      if (sosReport.userId.toString() !== userId) {
        return res.status(403).json({ error: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª" });
      }
      const reason = await CancellationReasons.findById(reasonId);
      if (!reason) {
        return res.status(400).json({ error: "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }
      sosReport.status = 'canceled';
      sosReport.cancellationReason = reasonId;
      sosReport.updatedAt = Date.now();
      await sosReport.save();
      res.json({ message: "SOS-—Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ë–Ω", sos: sosReport });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ SOS-—Å–∏–≥–Ω–∞–ª–∞:", error.message);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ SOS-—Å–∏–≥–Ω–∞–ª–∞" });
    }
  };

  // ‚úÖ –û—Ç–∫–ª–∏–∫ –Ω–∞ SOS-—Å–∏–≥–Ω–∞–ª
  exports.markAsHelper = async (req, res) => {
    try {
      const { sosId } = req.body;
      const userId = req.user.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ SOS-—Å–∏–≥–Ω–∞–ª
      const sosSignal = await SosReport.findById(sosId);
      if (!sosSignal) {
        return res.status(404).json({ message: 'SOS-—Å–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫–ª–∏–∫–∞–ª—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingHelper = await SosHelper.findOne({ sosId, userId });
      if (existingHelper) {
        return res.status(400).json({ message: '–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª' });
      }

      // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ–± –æ—Ç–∫–ª–∏–∫–µ
      const helper = new SosHelper({ sosId, userId });
      await helper.save();

      return res.status(201).json({ message: '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ SOS-—Å–∏–≥–Ω–∞–ª' });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ –Ω–∞ SOS-—Å–∏–≥–Ω–∞–ª:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  };

  // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–∏—Ö—Å—è
  exports.getSosHelpers = async (req, res) => {
    try {
      const { sosId } = req.params;
  
      // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
      const helpers = await SosHelper.find({ sosId });
  
      if (!helpers.length) {
        return res.status(200).json([]); // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      }
  
      // 2Ô∏è‚É£ –°–æ–±–∏—Ä–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const userIds = helpers.map(helper => helper.userId.toString());
  
      // 3Ô∏è‚É£ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      let users = [];
      try {
        const userResponse = await axios.post(`http://localhost:5001/api/users/profiles-by-ids`, { userIds });
  
        if (userResponse.data && Array.isArray(userResponse.data)) {
          users = userResponse.data;
        } else {
          console.error("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç user-service:", userResponse.data);
        }
      } catch (err) {
        console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ user-service:", err.message);
      }
  
      // 4Ô∏è‚É£ –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º `users`)
      const helpersWithUserData = helpers.map(helper => {
        const userData = users.find(user => user?._id?.toString() === helper.userId?.toString()) || null;
        return {
          _id: helper._id,
          sosId: helper.sosId,
          createdAt: helper.createdAt,
          user: userData
        };
      });
  
      res.status(200).json(helpersWithUserData);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  };
  
  // üìå –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–æ—â–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ SOS
  exports.isUserHelper = async (req, res) => {
    try {
      const { sosId } = req.params;
      const userId = req.user.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–µ–¥–∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
      const helper = await SosHelper.findOne({ sosId, userId });

      res.json({ isHelper: !!helper }); // true, –µ—Å–ª–∏ –ø–æ–º–æ—â–Ω–∏–∫, –∏–Ω–∞—á–µ false
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  };

    // üìå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
  exports.confirmHelpers = async (req, res) => {
    try {
      const { sosId, helpers } = req.body; // helpers = –º–∞—Å—Å–∏–≤ userId
      const userId = req.user.id;

      if (!mongoose.Types.ObjectId.isValid(sosId)) {
        return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID" });
      }

      const sosSignal = await SosReport.findById(sosId);
      if (!sosSignal) {
        return res.status(404).json({ error: "SOS-—Å–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (sosSignal.userId.toString() !== userId) {
        return res.status(403).json({ error: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞" });
      }

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
      const confirmedHelpers = helpers.map(helperId => ({
        sosId,
        userId: helperId,
        confirmedBy: userId
      }));

      await SosConfirmedHelper.insertMany(confirmedHelpers);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å SOS-—Å–∏–≥–Ω–∞–ª–∞
      sosSignal.status = 'resolved';
      await sosSignal.save();

      res.status(200).json({ message: "–ü–æ–º–æ—â–Ω–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã", confirmedHelpers });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  };

  // üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤
  exports.getConfirmedHelpers = async (req, res) => {
    try {
      const { sosId } = req.params;

      const confirmedHelpers = await SosConfirmedHelper.find({ sosId }).populate('userId', 'username email');

      res.json(confirmedHelpers);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤:', error);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  };

  exports.getActiveSosByUserId = async (req, res) => {
    try {
        const { userId } = req.query;
        console.log(`üì° –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π SOS-—Å–∏–≥–Ω–∞–ª –¥–ª—è userId: ${userId}`);

        if (!userId) {
            return res.status(400).json({ message: "userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø userId
        console.log("üõ†Ô∏è –¢–∏–ø userId:", typeof userId); 

        // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π SOS-—Å–∏–≥–Ω–∞–ª
        const activeSos = await SosReport.findOne({ userId, status: "active" }).sort({ createdAt: -1 });

        if (!activeSos) {
            console.warn(`‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ SOS-—Å–∏–≥–Ω–∞–ª–∞.`);
            return res.status(404).json({ message: "–ê–∫—Ç–∏–≤–Ω—ã–π SOS-—Å–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        console.log("‚úÖ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π SOS-—Å–∏–≥–Ω–∞–ª:", activeSos);
        res.status(200).json(activeSos);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ SOS:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  };

  // üìå –û—Ç–º–µ–Ω–∞ —É—á–∞—Å—Ç–∏—è –≤ SOS-—Å–∏–≥–Ω–∞–ª–µ
  exports.leaveSosSignal = async (req, res) => {
    try {
      const { sosId } = req.body;
      const userId = req.user.id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫–ª–∏–∫ –Ω–∞ SOS
      const helper = await SosHelper.findOne({ sosId, userId });
      if (!helper) {
        return res.status(400).json({ message: "–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º SOS-—Å–∏–≥–Ω–∞–ª–µ" });
      }

      // –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await SosHelper.deleteOne({ _id: helper._id });

      return res.status(200).json({ message: "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ SOS-—Å–∏–≥–Ω–∞–ª" });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ SOS-—Å–∏–≥–Ω–∞–ª–∞:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  };

  exports.checkSosAccess = async (req, res) => {
    try {
        const userId = req.user.id;
        console.log(`üîç checkSosAccess –≤—ã–∑–≤–∞–Ω\nüîç userId: ${userId}`);

        // üî• –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ user-service
        const userResponse = await axios.get(`${USER_SERVICE_URL}/${userId}`, {
            headers: { Authorization: req.headers.authorization }
        });

        console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç user-service:", userResponse.data);

        if (!userResponse.data || !userResponse.data.user || !userResponse.data.user.createdAt) {
            return res.status(404).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ." });
        }

        const createdAt = new Date(userResponse.data.user.createdAt);
        const now = new Date();
        const diffMilliseconds = now - createdAt;

        // üîπ –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ 2 –º–µ—Å—è—Ü–µ–≤
        const requiredMilliseconds = 60 * 24 * 60 * 60 * 1000; // 60 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        const remainingMilliseconds = requiredMilliseconds - diffMilliseconds;

        if (remainingMilliseconds > 0) {
            // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–µ—Å—è—Ü–µ–≤, –¥–Ω–µ–π –∏ —á–∞—Å–æ–≤
            const remainingMonths = Math.floor(remainingMilliseconds / (1000 * 60 * 60 * 24 * 30));
            const remainingDays = Math.floor((remainingMilliseconds % (1000 * 60 * 60 * 24 * 30)) / (1000 * 60 * 60 * 24));
            const remainingHours = Math.floor((remainingMilliseconds % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));

            console.log(`‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ${remainingMonths} –º–µ—Å., ${remainingDays} –¥–Ω., ${remainingHours} —á.`);

            return res.status(403).json({
                access: false,
                message: "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ 2-—Ö –º–µ—Å—è—Ü–µ–≤ —á–ª–µ–Ω—Å—Ç–≤–∞.",
                remainingMonths,
                remainingDays,
                remainingHours
            });
        }

        res.status(200).json({ access: true });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –≤ user-service:", error);
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ SOS" });
    }
};
