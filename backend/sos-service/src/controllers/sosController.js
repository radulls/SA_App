const SosReport = require('../models/SosReport');
const SosHelper = require('../models/SosHelper');
const SosTags = require('../models/SosTag');
const mongoose = require('mongoose');
const axios = require('axios');

// üìå –°–æ–∑–¥–∞–Ω–∏–µ SOS-—Å–∏–≥–Ω–∞–ª–∞
exports.createSosSignal = async (req, res) => {
  try {
    console.log("üì© –î–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", req.body);
    console.log("üì∑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (Multer):", req.files); // ‚úÖ –§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–¥–µ—Å—å
    const userId = req.user.id;
    const { location, tags, title, description } = req.body;
    if (!userId || !location || !title || !tags || tags.length === 0) {
      return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
    }
    const tagObjects = await SosTags.find({ _id: { $in: tags } }, '_id');
    const tagIds = tagObjects.map(tag => tag._id);
    if (tagIds.length !== tags.length) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ' });
    }
    // ‚úÖ –¢–µ–ø–µ—Ä—å `req.files` —É–∂–µ –º–∞—Å—Å–∏–≤, –ø—Ä–æ—Å—Ç–æ –º–∞–ø–ø–∏–º `path`
    const photos = req.files ? req.files.map(file => file.path) : [];
    const newSos = new SosReport({
      userId: new mongoose.Types.ObjectId(userId),
      location,
      tags: tagIds,
      title,
      description,
      photos // ‚úÖ –¢–µ–ø–µ—Ä—å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
    });
    await newSos.save();
    console.log("‚úÖ SOS-—Å–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:", newSos);
    res.status(201).json({ message: 'SOS-—Å–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω', sos: newSos });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ SOS-—Å–∏–≥–Ω–∞–ª–∞:", error);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SOS-—Å–∏–≥–Ω–∞–ª–∞', details: error.message });
  }
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö SOS-—Å–∏–≥–Ω–∞–ª–æ–≤
exports.getSosSignals = async (req, res) => {
  try {
    const sosReports = await SosReport.find().populate('tags').populate('userId', 'username email');
    res.json(sosReports);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SOS-—Å–∏–≥–Ω–∞–ª–æ–≤' });
  }
};

exports.getSosTags = async (req, res) => {
  try {
    const sosTags = await SosTags.find();
    res.json(sosTags)
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SOS-—Ç—ç–≥–æ–≤' })
  }
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ SOS-—Å–∏–≥–Ω–∞–ª–∞ –ø–æ ID
exports.getSosSignalById = async (req, res) => {
  try {
    const { sosId } = req.params;
    console.log("üì° –ü–æ–ª—É—á–∞–µ–º SOS-—Å–∏–≥–Ω–∞–ª —Å ID:", sosId);
    if (!mongoose.Types.ObjectId.isValid(sosId)) {
      console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ObjectId");
      return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID" });
    }
    // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–∞–º SOS-—Å–∏–≥–Ω–∞–ª (–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ)
    const sosReport = await SosReport.findById(sosId).populate('tags', 'name');

    if (!sosReport) {
      console.error("‚ùå –û—à–∏–±–∫–∞: SOS-—Å–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!");
      return res.status(404).json({ error: "SOS-—Å–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    // 2Ô∏è‚É£ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ `user-service`
    let userData = null;
    try {
      const userResponse = await axios.get(`http://localhost:5001/api/users/profile/${sosReport.userId}`);
      console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userResponse.data); // <--- –õ–û–ì–ò–†–£–ï–ú –û–¢–í–ï–¢
      userData = userResponse.data;
    } catch (err) {
      console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ user-service:", err.message);
    }

    // 3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    res.json({ ...sosReport.toObject(), user: userData });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SOS-—Å–∏–≥–Ω–∞–ª–∞:", error.message);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SOS-—Å–∏–≥–Ω–∞–ª–∞", details: error.message });
  }
};

// üìå –£–¥–∞–ª–µ–Ω–∏–µ SOS-—Å–∏–≥–Ω–∞–ª–∞ (–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä)
exports.deleteSosSignal = async (req, res) => {
  try {
    const { sosId } = req.params;
    const userId = req.user.id; // ‚úÖ ID –∏–∑ —Ç–æ–∫–µ–Ω–∞

    const sosReport = await SosReport.findById(sosId);
    if (!sosReport) {
      return res.status(404).json({ error: 'SOS-—Å–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (sosReport.userId.toString() !== userId) {
      return res.status(403).json({ error: '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª' });
    }

    await SosHelper.deleteMany({ sosId });
    await sosReport.deleteOne();

    res.json({ message: 'SOS-—Å–∏–≥–Ω–∞–ª —É–¥–∞–ª—ë–Ω' });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ SOS-—Å–∏–≥–Ω–∞–ª–∞' });
  }
};

// üìå –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–æ–º–æ—â–Ω–∏–∫–∞
exports.markAsHelper = async (req, res) => {
  try {
    const userId = req.user.id; // ‚úÖ ID –∏–∑ —Ç–æ–∫–µ–Ω–∞
    const { sosId } = req.body;

    const existingHelper = await SosHelper.findOne({ sosId, userId });
    if (existingHelper) {
      return res.status(400).json({ error: '–í—ã —É–∂–µ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø–æ–º–æ—â–Ω–∏–∫' });
    }

    const newHelper = new SosHelper({ sosId, userId });
    await newHelper.save();

    res.status(201).json({ message: '–ü–æ–º–æ—â–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω', helper: newHelper });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞' });
  }
};

// üìå –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ SOS-—Å–∏–≥–Ω–∞–ª–∞
exports.getSosHelpers = async (req, res) => {
  try {
    const helpers = await SosHelper.find({ sosId: req.params.sosId }).populate('userId', 'username email');
    res.json(helpers);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤' });
  }
};