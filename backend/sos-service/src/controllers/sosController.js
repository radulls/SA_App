const SosReport = require('../models/SosReport');
const SosHelper = require('../models/SosHelper');

// üìå –°–æ–∑–¥–∞–Ω–∏–µ SOS-—Å–∏–≥–Ω–∞–ª–∞
exports.createSosSignal = async (req, res) => {
  try {
    const { userId, location, tags, title, description, photos } = req.body;

    const newSos = new SosReport({ userId, location, tags, title, description, photos });
    await newSos.save();

    res.status(201).json({ message: 'SOS-—Å–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω', sos: newSos });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SOS-—Å–∏–≥–Ω–∞–ª–∞' });
  }
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö SOS-—Å–∏–≥–Ω–∞–ª–æ–≤
exports.getSosSignals = async (req, res) => {
  try {
    const sosReports = await SosReport.find().populate('tags').populate('userId', 'username email');
    res.json(sosReports);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SOS-—Å–∏–≥–Ω–∞–ª–æ–≤' });
  }
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ SOS-—Å–∏–≥–Ω–∞–ª–∞ –ø–æ ID
exports.getSosSignalById = async (req, res) => {
  try {
    const { sosId } = req.params;

    const sosReport = await SosReport.findById(sosId)
      .populate('tags', 'name')
      .populate('userId', 'username email');

    if (!sosReport) {
      return res.status(404).json({ error: 'SOS-—Å–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json(sosReport);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SOS-—Å–∏–≥–Ω–∞–ª–∞' });
  }
};

// üìå –£–¥–∞–ª–µ–Ω–∏–µ SOS-—Å–∏–≥–Ω–∞–ª–∞
exports.deleteSosSignal = async (req, res) => {
  try {
    const { sosId } = req.params;

    const sosReport = await SosReport.findById(sosId);
    if (!sosReport) {
      return res.status(404).json({ error: 'SOS-—Å–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –£–¥–∞–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∏ –≤—Å–µ—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º
    await SosHelper.deleteMany({ sosId });
    await sosReport.deleteOne();

    res.json({ message: 'SOS-—Å–∏–≥–Ω–∞–ª —É–¥–∞–ª—ë–Ω' });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ SOS-—Å–∏–≥–Ω–∞–ª–∞' });
  }
};

// üìå –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –æ–Ω –ø–æ–º–æ–≥–∞–µ—Ç
exports.markAsHelper = async (req, res) => {
  try {
    const { sosId, userId } = req.body;
    const existingHelper = await SosHelper.findOne({ sosId, userId });
    if (existingHelper) {
      return res.status(400).json({ error: '–í—ã —É–∂–µ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø–æ–º–æ—â–Ω–∏–∫' });
    }
    const newHelper = new SosHelper({ sosId, userId });
    await newHelper.save();
    res.status(201).json({ message: '–ü–æ–º–æ—â–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω', helper: newHelper });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞' });
  }
};

// üìå –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ SOS-—Å–∏–≥–Ω–∞–ª–∞
exports.getSosHelpers = async (req, res) => {
  try {
    const helpers = await SosHelper.find({ sosId: req.params.sosId }).populate('userId', 'username email');
    res.json(helpers);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤' });
  }
};
