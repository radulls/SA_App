const mongoose = require('mongoose');
const SosTag = require('../models/SosTag');
require('dotenv').config();

// üìå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
  .then(() => console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ'))
  .catch((err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
    process.exit(1);
  });

// üìå –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
const tags = [
  { name: '–ê–≤–∞—Ä–∏—è' },
  { name: '–ù–∞–ø–∞–¥–µ–Ω–∏–µ' },
  { name: '–ù–∞–ø–∞–¥–µ–Ω–∏–µ —Å –æ—Ä—É–∂–∏–µ–º' },
  { name: '–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ' },
  { name: '–¢—Ä–∞–≤–º–∞' },
  { name: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç' },
  { name: '–†—ç–∫–µ—Ç' },
  { name: '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ' }
];

// üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const seedTags = async () => {
  try {
    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Ç–µ–≥–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    await SosTag.deleteMany({});
    console.log('üóë –¢–∞–±–ª–∏—Ü–∞ `sos_tags` –æ—á–∏—â–µ–Ω–∞');

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–µ–≥–∏
    await SosTag.insertMany(tags);
    console.log('‚úÖ –¢–µ–≥–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã');

    mongoose.connection.close();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤:', error);
    mongoose.connection.close();
  }
};

// üìå –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
seedTags();
