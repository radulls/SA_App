const multer = require('multer');
const path = require('path');
const { exec } = require('child_process');
const fs = require('fs');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, './uploads/'); // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);
    cb(null, uniqueSuffix + '-' + file.originalname);
  },
});

// –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
const fileFilter = (req, file, cb) => {
  if (file.mimetype === 'image/jpeg' || file.mimetype === 'image/png') {
    cb(null, true);
  } else {
    cb(new Error('–§–∞–π–ª—ã —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è'), false);
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é ImageMagick
const processImage = (filePath, isPng) =>
  new Promise((resolve, reject) => {
    const outputPath = filePath.replace(/(\.jpeg|\.jpg|\.png)$/i, `${isPng ? '.png' : '.jpg'}`);

    let command;
    if (isPng) {
      command = `convert "${filePath}" -auto-orient -resize "2400x2400>" -strip -define png:compression-level=0 "${outputPath}"`;
    } else {
      command = `convert "${filePath}" -auto-orient -resize "2400x2400>" -quality 100 -sampling-factor 4:4:4 -strip "${outputPath}"`;
    }

    exec(command, (error) => {
      if (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${filePath}:`, error.message);
        reject(error);
      } else {
        console.log(`‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –±–µ–∑ –ø–æ—Ç–µ—Ä—å: ${outputPath}`);
        resolve(outputPath);
      }
    });
  });

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const processUploadedFiles = (req, res, next) => {
  if (!req.files) return next(); // –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

  const tasks = Object.keys(req.files).map((key) =>
    Promise.all(
      req.files[key].map(async (file) => {
        const isPng = file.mimetype === 'image/png';
        try {
          const processedPath = await processImage(file.path, isPng);
          console.log(`üì• –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${file.originalname}, —Ä–∞–∑–º–µ—Ä: ${file.size} –±–∞–π—Ç`);
          file.processedPath = processedPath; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${file.originalname}:`, error);
        }
      })
    )
  );

  Promise.all(tasks)
    .then(() => next())
    .catch((error) => res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', error }));
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º multer —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
const upload = multer({
  storage,
  limits: {
    fileSize: 1024 * 1024 * 20, // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 5MB
  },
  fileFilter,
});

module.exports = {
  upload,
  processUploadedFiles,
};
