const { generateCode } = require('../services/codeService');
const User = require('../models/User');
const Code = require('../models/Code');

async function createCode(req, res) {
  try {
    const { type } = req.body;
    const userId = req.user.id;

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (user.role === 'admin' && type !== 'user') {
      return res.status(403).json({ message: '–ê–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
    }

    if (!['user', 'admin'].includes(type)) {
      return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–¥–∞' });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∏ –ø–µ—Ä–µ–¥–∞—ë–º userId —Å–æ–∑–¥–∞—Ç–µ–ª—è
    const newCode = await generateCode(type, userId);

    res.status(201).json({ code: newCode.code, type: newCode.type, createdBy: userId });

  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
}

async function getUsersByInviteCode(req, res) {
  try {
    if (!req.user || !req.user.id) {
      return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
    }
    const userId = req.user.id;
    console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', userId);
    const invitedUsers = await User.find({ invitedBy: userId })
      .select('firstName lastName username profileImage');
    if (!invitedUsers || invitedUsers.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
      return res.status(200).json([]);
    }
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', invitedUsers.length);
    res.status(200).json(invitedUsers);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
}

async function getUserCodes(req, res) {
  try {
    const userId = req.user.id;

    const codes = await Code.find({ createdBy: userId })
      .select('code type isUsed usedAt createdAt');

    res.status(200).json(codes);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
}

module.exports = { createCode, getUsersByInviteCode, getUserCodes };
