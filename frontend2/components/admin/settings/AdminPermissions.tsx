import React, {
  useState,
  useEffect,
  forwardRef,
  useImperativeHandle,
} from 'react';
import {
  View,
  Text,
  StyleSheet,
  Alert,
  TouchableOpacity,
} from 'react-native';
import {
  addSubdivisionAdmin,
  updateSubdivisionAdmin,
  getSubdivisionAdminByUserId,
  removeSubdivisionAdmin,
} from '@/api/adminApi';
import CustomSwitch from '@/components/settings/CustomSwitch';
import Toast from 'react-native-toast-message'; // –≤–≤–µ—Ä—Ö—É, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω

export interface AdminPermissionsProps {
  subdivisionId: string;
  userId: string;
  onBack: () => void;
  currentAdminIds?: string[];
}

const defaultPermissions = {
  assignAdmins: false,
  publishPosts: false,
  createEvents: false,
  messages: false,
  supportResponse: false,
  complaintResponse: false,
  addMembers: false,
  addMarket: false,
  manageLimits: false,
};

const AdminPermissions = forwardRef(({ subdivisionId, userId, onBack, currentAdminIds = [] }: AdminPermissionsProps, ref) => {
  const isEditMode = currentAdminIds.includes(userId);

  const [permissions, setPermissions] = useState(defaultPermissions);
  const [loading, setLoading] = useState(isEditMode); // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const [adminId, setAdminId] = useState<string | null>(null);

  useEffect(() => {
    const fetchExistingPermissions = async () => {
      if (!isEditMode) return;
  
      try {
        const existing = await getSubdivisionAdminByUserId(subdivisionId, userId);
        if (existing?.permissions) {
          setPermissions(existing.permissions);
          setAdminId(existing._id); // üí• –≤–æ—Ç —ç—Ç–æ –≤–∞–∂–Ω–æ
        }
      } catch (err) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞:', err);
      } finally {
        setLoading(false);
      }
    };
  
    fetchExistingPermissions();
  }, [isEditMode, subdivisionId, userId]);

  const togglePermission = (key: keyof typeof permissions) => {
    setPermissions(prev => ({ ...prev, [key]: !prev[key] }));
  };

  const handleSave = async () => {
    if (!subdivisionId || !userId) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ.');
      return;
    }
    try {
      if (isEditMode) {
        if (!adminId) {
          Alert.alert('–û—à–∏–±–∫–∞', 'ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
          return;
        }
        await updateSubdivisionAdmin(adminId, permissions);
      } else {
        await addSubdivisionAdmin({ subdivisionId, userId, permissions });
      }
      

      onBack();
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å ${isEditMode ? '–æ–±–Ω–æ–≤–∏—Ç—å' : '–¥–æ–±–∞–≤–∏—Ç—å'} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞`);
    }
  };

  const handleRemove = async () => {
    if (!adminId) {
      Toast.show({
        type: 'error',
        text1: '–û—à–∏–±–∫–∞',
        text2: 'ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.',
      });
      return;
    }
  
    try {
      await removeSubdivisionAdmin(adminId);
      Toast.show({
        type: 'success',
        text1: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª—ë–Ω',
      });
      onBack();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
      Toast.show({
        type: 'error',
        text1: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      });
    }
  }; 

  useImperativeHandle(ref, () => ({ handleSave }));

  if (loading) {
    return (
      <View style={styles.container}>
        <Text>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={styles.title}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤</Text>

      {Object.entries(permissions).map(([key, value]) => (
        <View key={key} style={styles.row}>
          <Text style={styles.label}>{getPermissionLabel(key)}</Text>
          <CustomSwitch
            value={value}
            onValueChange={() => togglePermission(key as keyof typeof permissions)}
          />
        </View>      
      ))}
       <TouchableOpacity onPress={handleRemove}>
        <Text style={[styles.label ,styles.removeButtonText]}>–£–±—Ä–∞—Ç—å –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</Text>
      </TouchableOpacity>
    </View>
  );
});

const getPermissionLabel = (key: string): string => {
  const labels: Record<string, string> = {
    assignAdmins: '–ù–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤',
    publishPosts: '–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã',
    createEvents: '–°–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è',
    messages: '–°–æ–æ–±—â–µ–Ω–∏—è',
    supportResponse: '–û—Ç–≤–µ—Ç—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ',
    complaintResponse: '–û—Ç–≤–µ—Ç—ã –Ω–∞ –∂–∞–ª–æ–±—ã',
    addMembers: '–î–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
    addMarket: '–î–æ–±–∞–≤–ª—è—Ç—å –º–∞—Ä–∫–µ—Ç',
    manageLimits: '–£–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏–º–∏—Ç–∞–º–∏',
  };
  return labels[key] || key;
};

const styles = StyleSheet.create({
  container: {
     flex: 1,
     paddingHorizontal: 16, 
    },
  title: { 
    fontSize: 18, 
    fontWeight: 'bold', 
    marginBottom: 20 
  },
  row: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,
  },
  label: { 
    fontSize: 12,
    fontWeight: '700', 
  },
  removeButtonText:{
    color: '#F00'
  }
});

export default AdminPermissions;
