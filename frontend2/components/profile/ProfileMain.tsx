import React, { useEffect, useState } from 'react';
import { IMAGE_URL, UserDataProps, getUserProfile } from '@/api/index'; 
import { getSosSignalByUserId } from '@/api/sos/sosApi';
import { View, ScrollView, Image, TouchableOpacity, ActivityIndicator, Text, Modal, Pressable, Platform, Alert, LayoutAnimation } from 'react-native';
import { router } from 'expo-router';
import ProfileHeader from './ProfileHeader';
import ProfileStats from './ProfileStats';
import Post from '../Posts/Post';
import * as ImagePicker from 'expo-image-picker';
import BottomNavigation from '../BottomNavigation';
import EditBackgroundImage from './EditBackgroundImage';
import SettingsIcon from '../svgConvertedIcons/SettingsIcon';
import SosIcon from '../svgConvertedIcons/sosIcons/SosIcon';
import QrIcon from '../svgConvertedIcons/qrIcon';
import { styles } from './profileStyle';
import ProfileSosIcon from '../svgConvertedIcons/sosIcons/profileSosIcon';
import { updateUser } from '@/api'; 
import Toast from 'react-native-toast-message';
import { PostData, getPostsByUser } from '@/api/postApi';

const ProfileMain: React.FC = () => {
  const [user, setUser] = useState<UserDataProps | null>(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [loading, setLoading] = useState<boolean>(true); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const [error, setError] = useState<string | null>(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–æ–∫
  const [isModalVisible, setModalVisible] = useState(false);
  const [imageKey, setImageKey] = useState(Date.now());
  const [backgroundImage, setBackgroundImage] = useState(user?.backgroundImage);
  const [isEditing, setEditing] = useState<boolean>(false);
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [sosSignal, setSosSignal] = useState<any | null>(null);
  const [posts, setPosts] = useState<PostData[]>([]);

  useEffect(() => {
    if (user?.backgroundImage) {
      let fixedUrl = user.backgroundImage;
      if (!user.backgroundImage.startsWith('http')) {
        fixedUrl = `${IMAGE_URL}${user.backgroundImage}`;
      }
      console.log(' –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:', fixedUrl); //  –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
      setBackgroundImage(fixedUrl);
    }
  }, [user]);
  
  const handleImagePick = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: false,
      quality: 1,
    });
  
    if (!result.canceled && result.assets) {
      const selectedImageUri = result.assets[0].uri;
      setSelectedImage(selectedImageUri);
      setModalVisible(true);
      setTimeout(() => setEditing(true), 100);
    }
  };
  
  const handleSave = async (newImage: string | null) => {
    try {
      if (!newImage) {
        // –ï—Å–ª–∏ `newImage` –ø—É—Å—Ç–æ–µ, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        setBackgroundImage(undefined);
        setUser(prev => prev ? { ...prev, backgroundImage: undefined } : prev);
        return;
      }
  
      let fileUri = newImage;
      let fileType = 'image/jpeg';
      let fileName = `background-${Date.now()}.jpg`;
      let fileBlob = null;
  
      if (Platform.OS === 'web') {
        const response = await fetch(fileUri);
        fileBlob = await response.blob();
        fileBlob = new File([fileBlob], fileName, { type: fileType });
      } else {
        fileBlob = {
          uri: fileUri,
          type: fileType,
          name: fileName,
        } as any;
      }
  
      const formData = new FormData();
      formData.append('backgroundImage', fileBlob);
  
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', formData);
  
      const response = await updateUser({}, formData);
  
      if (response?.user?.backgroundImage) {
        console.log("‚úÖ –§–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", response.user.backgroundImage);
        setBackgroundImage(response.user.backgroundImage);
        setUser(prev => prev ? { ...prev, backgroundImage: response.user.backgroundImage } : prev);
        setImageKey(Date.now());
        Toast.show({
          type: 'success',
          text1: '–§–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω',
          visibilityTime: 2000,
        });
      } else {
        Toast.show({
          type: 'error',
          text1: '–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.',
          visibilityTime: 2000,
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      Toast.show({
        type: 'error',
        text1: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.',
        visibilityTime: 2000,
      });
    }
  };
  
  useEffect(() => {
    const fetchUserData = async () => {
      try {
        console.log("üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
        setLoading(true);
        const userData = await getUserProfile();
        console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userData);
  
        setUser(userData);
        if (userData?.backgroundImage) {
          setBackgroundImage(userData.backgroundImage);
        }
  
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å SOS
        if (userData?.id) {
          console.log("üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π SOS-—Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userData.id);
          const activeSos = await getSosSignalByUserId(userData.id);
          const userPosts = await getPostsByUser(userData.id);
          setPosts(userPosts);
  
          if (activeSos) {
            console.log("–ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π SOS-—Å–∏–≥–Ω–∞–ª:", activeSos);
            setSosSignal(activeSos);
          } else {
            console.log(" –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ SOS-—Å–∏–≥–Ω–∞–ª–∞.");
          }
        } else {
          console.warn("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
        }
      } catch (err: any) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err.message);
        setError(err.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.");
      } finally {
        setLoading(false);
      }
    };
  
    fetchUserData();
  }, []);
  
  const updateUserProfile = (updatedProfileImage: string) => {
    if (user) {
      setUser({ ...user, profileImage: updatedProfileImage });
    }
  };

  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#000" />
        <Text>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</Text>
      </View>
    );
  }

  // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
  if (error) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>–û—à–∏–±–∫–∞: {error}</Text>
      </View>
    );
  }

  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
  if (!user) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</Text>
      </View>
    );
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  return (
    <View style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollViewContent}>
        <View style={styles.contentContainer}>
          <View style={styles.headerButtons}>
            <TouchableOpacity
              onPress={() => {
                if (user && user.id) {
                  console.log(`Navigating to: /profileQR/${user.id}`);
                  router.push(`/profileQR/${user.id}`);
                } else {
                  console.error("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
                }
              }}
            >
              <QrIcon width={22} height={22} />
            </TouchableOpacity>
            {sosSignal ? (
              <Pressable onPress={() => router.push(`/sos-signal/${sosSignal._id}`)} style={styles.sosActiveContainer}>
                <ProfileSosIcon />
                <Text style={styles.sosActiveText}>SOS –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</Text>
              </Pressable>
            ) : (
              ''
            )}
            <View style={styles.rightIcons}>
              {sosSignal ? (
                ''
              ) : (
                <TouchableOpacity onPress={() => router.push("/sos")} style={styles.sosIcon}>
                  <SosIcon width={22} height={22} />
                </TouchableOpacity>
              )}
              <TouchableOpacity onPress={() => router.push("/settings")} style={[ sosSignal ? styles.settingIconSos : styles.settingIcon]}>
                <SettingsIcon width={22} height={22} />
              </TouchableOpacity>
            </View>
          </View>
          <TouchableOpacity
            onPress={async () => {
              if (!backgroundImage) {
                await handleImagePick();
              } else {
                setModalVisible(true);
              }
            }}
          >
            <View style={styles.coverImageContainer}>
              {backgroundImage ? (
                <Image
                  resizeMode="cover"
                  source={{
                    uri: `${backgroundImage}?key=${imageKey}`,
                    cache: 'reload',
                  }}
                  style={styles.coverImage}
                />
              ) : (
                <View style={styles.coverImage} />
              )}
            </View>
          </TouchableOpacity>
        <Modal visible={isModalVisible} animationType="slide">
          <EditBackgroundImage
            backgroundImage={selectedImage || backgroundImage || ''}
            onClose={() => { 
              setModalVisible(false);
              setEditing(false);
              setSelectedImage(null); 
            }} 
            onSave={(newImage) => {
              handleSave(newImage);
            }} 
            isEditing={isEditing} 
          />
        </Modal> 
          {user && <ProfileHeader user={user} isOwnProfile={true} onUpdateUserProfile={updateUserProfile} />}
          <ProfileStats user={user} />
          <View style={styles.divider} />
          {[...posts]
            .sort((a, b) => {
              if (a.isPinned && !b.isPinned) return -1;
              if (!a.isPinned && b.isPinned) return 1;
              return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime(); // –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            })
            .map((post) => (
              <Post
                key={post._id}
                post={post}
                onTogglePin={(id, newPinned) => {
                  LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);
                  setPosts(prev =>
                    prev.map(p => (p._id === id ? { ...p, isPinned: newPinned } : p))
                  );
                }}
              />
          ))}
        </View>
      </ScrollView>
      <BottomNavigation />
    </View>
  );
};

export default ProfileMain;
