import React, { useState } from 'react';
import { View, ScrollView, Text, Pressable, Platform, ToastAndroid, Alert } from 'react-native';
import InputField from '../eventCreation/InputField';
import ContinueButton from '../eventCreation/ContinueButton';
import { styles } from '@/components/settings/SettingsStyle';
import { SettingsProps } from '@/app/settings';
import { patch } from '@/api';
import ErrorMessage from '../ErrorMessage';
import Toast from 'react-native-toast-message';
import { checkEmail } from '@/api';

const SettingsEmail: React.FC<SettingsProps> = ({ user, onBack }) => {
  const [email, setEmail] = useState(user.email ?? '');
  const [isEmailVisible, setIsEmailVisible] = useState(false);
  const [newEmail, setNewEmail] = useState('');
  const [password, setPassword] = useState('');
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [isSaving, setIsSaving] = useState(false);

  const maskEmail = (email: string) => {
    if (!email.includes('@')) return email;
    const [name, domain] = email.split('@');
    const maskedName = name.length > 2 ? name[0] + '***' + name.slice(-1) : name[0] + '***';
    return `${maskedName}@${domain}`;
  };

  const handleSaveEmail = async () => {
    if (!newEmail.includes('@') || password.length < 3) {
      setErrorMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏ –ø–∞—Ä–æ–ª—å.');
      Toast.show({
        type: 'error',
        text1: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏ –ø–∞—Ä–æ–ª—å',
      });
      return;
    }
  
    try {
      setIsSaving(true);
      setErrorMessage(null);
  
      if (newEmail === email) {
        setErrorMessage('–ù–æ–≤—ã–π email —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º.');
        Toast.show({
          type: 'error',
          text1: '–í—ã –≤–≤–µ–ª–∏ —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π email.',
        });
        return;
      }
  
      // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email
      await checkEmail(newEmail);
  
      // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º
      await patch('/users/update', {
        email: newEmail,
        password,
      });
  
      setEmail(newEmail);
      setNewEmail('');
      setPassword('');
  
      Toast.show({
        type: 'success',
        text1: 'Email –æ–±–Ω–æ–≤–ª—ë–Ω!',
      });
  
      onBack(); // –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    } catch (error: any) {
      const msg = error?.response?.data?.message || error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email';
      setErrorMessage(msg);
      Toast.show({
        type: 'error',
        text1: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å email',
      });
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <View style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollViewContent} style={styles.scrollView}>
        <View style={styles.topItems}>
          <Text style={styles.topText}>
            –ü—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è —ç–ª. –ø–æ—á—Ç–∞:{'\n'}
            {isEmailVisible ? email : maskEmail(email)}
          </Text>
          <Pressable onPress={() => setIsEmailVisible(!isEmailVisible)}>
            <Text style={styles.showButton}>{isEmailVisible ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'}</Text>
          </Pressable>
        </View>

        <View style={styles.formWrapper}>
          <Text style={styles.subtitle}>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—á—Ç—É –∏ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å:</Text>

          <InputField label="–ù–æ–≤–∞—è –ø–æ—á—Ç–∞" value={newEmail} onChangeText={setNewEmail} />
          <InputField label="–ü–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞" value={password} onChangeText={setPassword} secureTextEntry />
        </View>
      </ScrollView>
      <View style={styles.ContinueButton}>
        <ContinueButton onPress={handleSaveEmail} text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"/>
      </View>
    </View>
  );
};

export default SettingsEmail;
