import React, { useState } from 'react';
import { View, Text, ScrollView, StyleSheet } from 'react-native';
import InputField from '../../components/InputField';
import ErrorMessage from '../../components/ErrorMessage';
import Button from '../../components/Button';
import { Link } from 'expo-router';
import { router } from 'expo-router';
import { getUserProfile, loginUser } from '@/api';
import AsyncStorage from '@react-native-async-storage/async-storage';

const LoginScreen = () => {
  const [formData, setFormData] = useState<{ identifier: string; password: string }>({
    identifier: '',
    password: '',
  });
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  const handleSubmit = async () => {
    setErrorMessage(null);
    setIsLoading(true);
  
    try {
      const { identifier, password } = formData;
      console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', { identifier, password });
  
      if (!identifier || !password) {
        setErrorMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.');
        setIsLoading(false);
        return;
      }
  
      // ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const response = await loginUser(identifier, password);
      console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
  
      // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
      await AsyncStorage.setItem('token', response.token);
  
      // üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updatedUser = await getUserProfile();
      console.log('üì° –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', updatedUser);
  
      // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await AsyncStorage.setItem('user', JSON.stringify(updatedUser));
  
      // ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      router.push('/home');
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      setErrorMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
      setIsLoading(false);
    }
  };
  
  
  return (
    <ScrollView contentContainerStyle={styles.scrollContainer}>
      <View style={styles.container}>
        <View style={styles.content}>
          <View style={styles.logo} />
          <View style={styles.formContainer}>
            <Text style={styles.title}>–í—Ö–æ–¥</Text>
            <InputField
              label="–¢–µ–ª–µ—Ñ–æ–Ω, id –∏–ª–∏ –ø–æ—á—Ç–∞"
              value={formData.identifier}
              onChange={(e) => setFormData((prev) => ({ ...prev, identifier: e }))}
            />
            <View style={styles.passwordContainer}>        
              <Link style={styles.forgotPassword} href="/reset-password">
                –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
              </Link>      
              {/* </View> */}
              <InputField
                value={formData.password}
                secureTextEntry
                onChange={(e) => setFormData((prev) => ({ ...prev, password: e }))}
                label=" –ü–∞—Ä–æ–ª—å"
              />
            </View>
            {errorMessage && (
              <ErrorMessage message={errorMessage} />
            )}
            <View style={styles.footer}>
              <Text style={styles.signUpText}>
                <Text style={styles.signUpTextGray}>–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? </Text>
                <Link style={styles.signUpTextBlue} href="/captcha?action=register">
                  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                </Link>
              </Text>
              <Button onPress={handleSubmit} title="–í–æ–π—Ç–∏" loading={isLoading} />
            </View>
          </View>
        </View>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  scrollContainer: {
    flexGrow: 1,
    backgroundColor: 'rgba(255, 255, 255, 1)',
  },
  container: {
    flexGrow: 1,
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 100)',
  },
  erorMessageWrapper: {
    marginTop: 40,
  },
	content: {
		backgroundColor: 'rgba(0, 0, 0, 100)',
		paddingHorizontal: 16,
		paddingTop: 58,
		maxWidth: 600,
		width: '100%',
	},
  logo: {
    backgroundColor: 'rgba(67, 67, 67, 1)',
    alignSelf: 'center',
    width: 186,
    height: 240,
  },
  formContainer: {
    marginTop: 28,
    flex: 1,
  },
  title: {
    color: 'rgba(255, 255, 255, 1)',
    fontSize: 18,
    marginBottom: 29,
    fontFamily: "SFUIDisplay-Bold",
  },
  passwordContainer: {
    position: 'relative',
  },
  passwordContainerTitles: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    width: '100%',
  },
  passwordLabel: {
    color: 'rgba(255, 255, 255, 1)',
    fontSize: 14,
    fontFamily: "SFUIDisplay-Bold",
  },
  forgotContainer: {
    position: 'relative',
  },
  forgotPassword: {
    color: '#94B3FF',
    fontSize: 12,
    position: 'absolute',
    right: 0,
    fontFamily: "SFUIDisplay-Bold",
    zIndex: 1
  },
  signUpText: {
    fontSize: 12,
    fontWeight: '500',
    textAlign: 'center',
    marginTop: 22,
    marginBottom: 20,
  },
  signUpTextGray: {
    color: 'rgba(139, 139, 139, 1)',
    fontFamily: "SFUIDisplay-medium",
  },
  signUpTextBlue: {
    color: 'rgba(148, 179, 255, 1)',
    fontWeight: '700',
    fontFamily: "SFUIDisplay-Bold",
  },
  footer: {
    paddingBottom: 41,
  },
});

export default LoginScreen;
