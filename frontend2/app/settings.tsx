import React, { useState, useEffect, useRef } from 'react';
import { View, StyleSheet, Text, Modal, TouchableOpacity, Switch, ScrollView } from 'react-native';
import { getUserProfile, UserDataProps } from '@/api';
import { getAllUsers } from '@/api';
import { getAllMarkets } from '@/api/marketApi';
import ProfileSection from '../components/settings/ProfileSection';
import IconBack from '@/components/svgConvertedIcons/iconBack';
import { useRouter } from 'expo-router';
import SettingsNameScreen from '@/components/settings/SettingsName';
import SettingsAbout from '@/components/settings/SettingsAbout';
import SettingsEmail from '@/components/settings/SettingsEmail';
import SettingsId from '@/components/settings/SettingsId';
import SettingsPhone from '@/components/settings/SettingsPhone';
import SettingsPassword from '@/components/settings/SettingPassword';
import SettingsCity from '@/components/settings/SettingsCity';
import SettingsBlocked from '@/components/settings/SettingsBlocked';
import SettingsActivationCode from '@/components/settings/SettingsActivationCode';
import SettingsAddedUsers from '@/components/settings/SettingsAddedUsers';
import SettingsNontification from '@/components/settings/SettingsNontification';
import { getInvitedUsers } from '@/api/activeCodes';
import { getBlockedUsers } from '@/api/blockedUsers';
import SettingsRules from '@/components/settings/SettingsRules';
import SettingsSupport from '@/components/settings/SettingsSupport';
import SettingsSubscription from '@/components/settings/SettingsSubscription';
import ParticipantList from './admin/users';
import Admins from '@/components/admin/settings/Admins';
import Market from '@/components/admin/settings/Market';
import Coupons from '@/components/admin/settings/Coupons';
import PartnerCoupons from '@/components/admin/settings/PartnersCoupons';
import SosTags from '@/components/admin/settings/SosTags';
import CouponPlusIcon from '@/components/svgConvertedIcons/settings/couponPlusIcon';
import DeletedUsersIcon from '@/components/svgConvertedIcons/settings/deletedUsersIcon';
import BlockedUsers from '@/components/admin/settings/BlockedUsers';
import SubdivisionManager from '@/components/admin/settings/SubdivisionManager';
import { Subdivision } from '@/types/subdivision';
import { MarketDataProps } from '@/types/market';
import AddAdmin from '@/components/admin/settings/AddAdmin';
import AdminPermissions from '@/components/admin/settings/AdminPermissions';
import SubdivisionInformation from '@/components/admin/settings/SubdivisionInformation';
import CustomModal from '@/components/admin/CustomModal';
import { deleteSubdivision } from '@/api/adminApi';
import CreateCouponScreen from '@/components/admin/settings/CreateCouponScreen';

export interface SettingsProps {
  user: UserDataProps;
  onBack: () => void;
}

const Divider = () => <View style={styles.divider} />;

const SettingsScreen = () => {
  const router = useRouter();
  const [user, setUser] = useState<UserDataProps | null>(null);
  const [loading, setLoading] = useState(true);
  const [settingHistory, setSettingHistory] = useState<string[]>([]);
  const activeSetting = settingHistory[settingHistory.length - 1] || null;
  const [isLogoutModalVisible, setIsLogoutModalVisible] = useState(false); 
  const [isDeleteAccountModalVisible, setIsDeleteAccountModalVisible] = useState(false);
  const [invitedCount, setInvitedCount] = useState(0);
  const [blockedCount, setBlockedCount] = useState(0); 
  const [markets, setMarkets] = useState<MarketDataProps[]>([]);
  const [usersCount, setUsersCount] = useState(0); 
  const [activeSubdivision, setActiveSubdivision] = useState<Subdivision | null>(null);
  const [addAdminMode, setAddAdminMode] = useState(false);
  const [adminSetupUser, setAdminSetupUser] = useState<string | null>(null);
  const [selectedTab, setSelectedTab] = useState<'personal' | 'group'>('personal'); // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
  const adminPermissionsRef = useRef<{ handleSave: () => void }>(null);
  const [isDeleteSubdivisionModalVisible, setIsDeleteSubdivisionModalVisible] = useState(false);
  const subdivisionManagerRef = useRef<{
    reload: () => void;
    getAllSubdivisions?: () => Subdivision[];
  }>(null);  

  const goToSetting = (key: string) => {
    setSettingHistory(prev => [...prev, key]);
  };  

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const userData = await getUserProfile();
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
        setUser(userData);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      } finally {
        setLoading(false);
      }
    };
    fetchUser();
  }, []);

  useEffect(() => {
    const fetchCounts = async () => {
      try {
        const invitedUsers = await getInvitedUsers();
        setInvitedCount(invitedUsers.length); 

        const blockedUsers = await getBlockedUsers();
        setBlockedCount(blockedUsers.length); 

        const fetchedMarkets = await getAllMarkets();
        setMarkets(fetchedMarkets); // ‚úÖ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Å–∏–≤        

        const users = await getAllUsers();
        setUsersCount(users.length); 

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      }
    };
  
    fetchCounts();
  }, []);

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <Text>–ó–∞–≥—Ä—É–∑–∫–∞...</Text>
      </View>
    );
  }

  if (!user) {
    return (
      <View style={styles.loadingContainer}>
        <Text>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</Text>
      </View>
    );
  }

  const subdivisionCityId = typeof activeSubdivision?.city === 'string'
  ? activeSubdivision.city
  : activeSubdivision?.city?._id;

    const marketIdsInSubdivision = activeSubdivision?.markets?.map(m => typeof m === 'string' ? m : m._id);

    const filteredMarkets = markets.filter(m => {
      const marketCityId = typeof m.city === 'string'
        ? m.city
        : m.city && '_id' in m.city
          ? m.city._id
          : undefined;

      return (
        marketCityId &&
        subdivisionCityId &&
        marketCityId === subdivisionCityId &&
        marketIdsInSubdivision?.includes(m._id)
      );
    });

    const handleBack = async () => {
      if (settingHistory.length > 0) {
        const newHistory = settingHistory.slice(0, -1);
        const prev = newHistory[newHistory.length - 1];
    
        if (prev !== 'admins-add') {
          setAddAdminMode(false);
        }
        if (prev !== 'admins') {
          setAdminSetupUser(null);
        }
    
        setSettingHistory(newHistory);
    
        // üëá –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º user, –µ—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        if (newHistory.length === 0) {
          try {
            const userData = await getUserProfile();
            setUser(userData);
          } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ user:', e);
          }
        }
      } else {
        router.back();
      }
    };
    
  const hasPendingMarkets = markets.some(m => 
    m.verificationStatus === 'pending' &&
    (typeof m.city === 'string' ? m.city : m.city._id) === subdivisionCityId
  );
  
  
  // const handleLogout = async () => {
  //   try {
  //     await AsyncStorage.removeItem('token'); // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  //     setIsLogoutModalVisible(false);
  //     router.replace('/auth/login'); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
  //   } catch (error) {
  //     console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
  //   }
  // };

  const getHeaderTitle = (activeSetting: string | null) => {
    switch (activeSetting) {
      case 'name':
        return '–ò–º—è';
      case 'id':
        return '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å id';
      case 'about':
        return '–û —Å–µ–±–µ';
      // case 'phone':
      //   return '–¢–µ–ª–µ—Ñ–æ–Ω';
      case 'email':
        return '–ü–æ—á—Ç–∞';
      case 'password':
        return '–ó–∞–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å';
      case 'city':
        return '–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥';
      case 'blocked':
        return '–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫';
      case 'code':
        return '–ê–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥';
      case 'addedUsers': 
        return '–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞–º–∏';
      case 'nontification': 
        return '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è';
      case 'rules': 
        return '–ü—Ä–∞–≤–∏–ª–∞';
      case 'support': 
        return '–ü–æ–¥–¥–µ—Ä–∂–∫–∞';
      case 'subs': 
        return '';
      default:
        return '–ù–∞—Å—Ç—Ä–æ–π–∫–∏';
    }
  };

  const renderActiveSetting = () => {
    switch (activeSetting) {
      case 'name': return <SettingsNameScreen user={user} onBack={handleBack} />;
      case 'id': return <SettingsId user={user} onBack={handleBack} />;
      case 'about': return <SettingsAbout user={user} onBack={handleBack} />;
      case 'email': return <SettingsEmail user={user} onBack={handleBack} />;
      case 'password': return <SettingsPassword user={user} onBack={handleBack} />;
      case 'city': return <SettingsCity user={user} onBack={handleBack} />;
      case 'blocked': return <SettingsBlocked onBack={handleBack} />;
      case 'code': 
      return (
        <SettingsActivationCode 
          userRole={user?.role as 'user' | 'creator' | 'admin'} 
          onBack={handleBack} 
          goToSetting={goToSetting}
        />
      );    
      case 'addedUsers': 
      return <SettingsAddedUsers onBack={handleBack} />;
      case 'nontification': 
      return <SettingsNontification onBack={handleBack}/>;
      case 'rules': 
      return <SettingsRules onBack={handleBack}/>;
      case 'support': 
      return <SettingsSupport onBack={handleBack}/>;
      case 'subs': 
      return <SettingsSubscription onBack={handleBack}/>;
      default: return null;
    }
  };

  const getGroupHeaderTitle = () => {
    if (activeSetting === 'admins') {
      if (addAdminMode) {
        return adminSetupUser ? '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞' : '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞';
      }
      return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã';
    }
  
    switch (activeSetting) {
      case 'participants': 
        return '–£—á–∞—Å—Ç–Ω–∏–∫–∏';
      case 'market': 
        return '–ú–∞—Ä–∫–µ—Ç';
      case 'coupons': 
        return '–ö—É–ø–æ–Ω—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è';
      case 'partner-coupons': 
        return '–ö—É–ø–æ–Ω—ã –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤';
      case 'create-coupon':
        return '–°–æ–∑–¥–∞—Ç—å –∫—É–ø–æ–Ω';
      case 'sosTags': 
        return '–¢–µ–≥–∏ SOS';
      case 'blockedUsers': 
        return '–£–¥–∞–ª—ë–Ω–Ω—ã–µ';
      case 'subInfo': 
        return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è';
      default: 
        return '–ù–∞—Å—Ç—Ä–æ–π–∫–∏';
    }
  };

  const renderGroupSetting = () => {
    switch (activeSetting) {
      case 'participants':
        return activeSubdivision ? (
          <ParticipantList
            onBack={handleBack}
            members={activeSubdivision?.members?.map(m => typeof m === 'string' ? m : m._id) || []}
            pendingRequests={activeSubdivision?.pendingRequests?.map(p => typeof p === 'string' ? p : p._id) || []}
            cityId={
              typeof activeSubdivision?.city === 'string'
                ? activeSubdivision.city
                : activeSubdivision?.city?._id
            }
          />
        ) : null;
        
      case 'admins':
        return activeSubdivision ? (
          addAdminMode ? (
            adminSetupUser ? (
              <AdminPermissions
              ref={adminPermissionsRef}
              subdivisionId={activeSubdivision._id}
              userId={adminSetupUser}
              currentAdminIds={activeSubdivision?.admins?.map(a => typeof a === 'string' ? a : a._id) || []}
              onBack={handleBack}
            />              
            ) : (
              <AddAdmin
              subdivision={activeSubdivision}
              onBack={handleBack}
              onSelect={(userId) => setAdminSetupUser(userId)}
              />            
            )
          ) : (
            <Admins
            key="admins-screen"
            onBack={handleBack}
            onAdd={() => {
              setAddAdminMode(true);
            }}
            onEdit={(userId) => {
              setAddAdminMode(true);
              setAdminSetupUser(userId); // —É—Å—Ç–∞–Ω–æ–≤–∏–º —Å—Ä–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            }}
            adminIds={activeSubdivision?.admins?.map(a => typeof a === 'string' ? a : a._id) || []}
          />            
          )
        ) : null;
      
      case 'market':
          return (
            <Market
              onBack={handleBack}
              cityId={
                typeof activeSubdivision?.city === 'string'
                  ? activeSubdivision.city
                  : activeSubdivision?.city?._id
              }
              marketIds={activeSubdivision?.markets?.map(m => typeof m === 'string' ? m : m._id)}
            />     
          );
      case 'coupons':
        return <Coupons onBack={handleBack} />;
      case 'partner-coupons':
        return <PartnerCoupons onBack={handleBack} />;
      case 'create-coupon':
        return (
          <CreateCouponScreen
            onBack={handleBack}
            subdivisionId={activeSubdivision?._id}
          />
        );
      case 'sosTags':
        return <SosTags onBack={handleBack} />;
      case 'blockedUsers':
        return <BlockedUsers onBack={handleBack} />;
        case 'subInfo': 
        return activeSubdivision ? (
          <SubdivisionInformation
            onBack={handleBack}
            info={activeSubdivision}
            allSubdivisions={subdivisionManagerRef.current?.getAllSubdivisions?.() || []} // üëà –≤–æ—Ç —ç—Ç–æ
          />
        ) : null;         
      default:
        return null;
    }
  };
  
  return (
    <View style={[styles.container, activeSetting === 'subs' && { backgroundColor: '#FFD200' }]}>
     <View style={styles.contentContainer}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ */}
        <View style={styles.headerIcons}>
          <View style={styles.backIcon}>
            <IconBack fill={activeSetting === 'subs' ? '#fff' : '#000'} onPress={handleBack} />
          </View>

          <Text style={styles.headerTitle}>
            {selectedTab === 'personal' ? getHeaderTitle(activeSetting) : getGroupHeaderTitle()}
          </Text>

          {activeSetting === 'coupons' && (
            <TouchableOpacity onPress={() => setSettingHistory(prev => [...prev, 'create-coupon'])}
            style={styles.plusIcon}>
              <CouponPlusIcon />
            </TouchableOpacity>
          )}

          {activeSetting === 'participants' && (
            <TouchableOpacity onPress={() => setSettingHistory(prev => [...prev, 'blockedUsers'])}style={styles.plusIcon}>
              <DeletedUsersIcon/>
            </TouchableOpacity>
          )}

          {activeSetting === 'admins' && addAdminMode && adminSetupUser && (
            <TouchableOpacity onPress={() => {
              // –¢—É—Ç –ø—Ä–æ–∫–∏–Ω–µ–º handleSave –∏–∑ AdminPermissions:
              const adminPermsComponent = adminPermissionsRef.current;
              adminPermsComponent?.handleSave();
            }} style={styles.plusIcon}>
              <Text style={{ color: '#000', fontWeight: 'bold' }}>–ì–æ—Ç–æ–≤–æ</Text>
            </TouchableOpacity>
          )}
        </View>
        {/* –ü–µ—Ä–µ–∫–ª—é—á–∞–ª–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ) */}
        {activeSetting === null && (user.role === 'creator' || user.role === 'admin') && (
          <View style={styles.buttonRow}>
            <View style={styles.buttonRowItem}>
              <TouchableOpacity
                style={[
                  styles.typeButton,
                  selectedTab === 'personal' && styles.activeTypeButton,
                ]}
                onPress={() => setSelectedTab('personal')}
              >
                <Text
                  style={[
                    styles.buttonRowText,
                    selectedTab === 'personal' && styles.buttonRowTextSelected,
                  ]}
                >
                  –õ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                </Text>
              </TouchableOpacity>
            </View>
            <View style={styles.buttonRowItem}>
              <TouchableOpacity
                style={[
                  styles.typeButton,
                  selectedTab === 'group' && styles.activeTypeButton,
                ]}
                onPress={() => setSelectedTab('group')}
              >
                <Text
                  style={[
                    styles.buttonRowText,
                    selectedTab === 'group' && styles.buttonRowTextSelected,
                  ]}
                >
                  –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
                </Text>
              </TouchableOpacity>
            </View>         
          </View>
        )}
        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –æ–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
        <ScrollView contentContainerStyle={styles.content}>
          {activeSetting ? (
            selectedTab === 'personal' ? renderActiveSetting() : renderGroupSetting()
          ) : (
            <View style={styles.mainContentContainer}>
              <View style={styles.mainContent}>
                {selectedTab === 'personal' ? (
                  <>
                    <ProfileSection onPress={() => setSettingHistory(prev => [...prev, 'name'])} label="–ò–º—è" value={`${user.firstName} ${user.lastName}`} />
                    <ProfileSection onPress={() => setSettingHistory(prev => [...prev, 'id'])} label="ID" value={'@' + user.username} />
                    <ProfileSection onPress={() => setSettingHistory(prev => [...prev, 'about'])} label="–û —Å–µ–±–µ" value='' />
                    <ProfileSection label="–ì–æ—Ä–æ–¥" onPress={() => setSettingHistory(prev => [...prev, 'city'])} value={user.city || '–ù–µ —É–∫–∞–∑–∞–Ω'} />
                    <ProfileSection
                      label="–ê–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥"
                      onPress={() => setSettingHistory(prev => [...prev, 'code'])}
                      value={`${invitedCount}`}
                    />
                    <Divider />
                    <ProfileSection label="–¢–µ–ª–µ—Ñ–æ–Ω" value={user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'} isNone />
                    <ProfileSection onPress={() => setSettingHistory(prev => [...prev, 'email'])} label="–ü–æ—á—Ç–∞" value={user.email || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} />
                    <ProfileSection onPress={() => setSettingHistory(prev => [...prev, 'password'])} label="–ü–∞—Ä–æ–ª—å" value={'*********'} />
                    <ProfileSection
                      onPress={() => setSettingHistory(prev => [...prev, 'blocked'])}
                      label="–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"
                      value={`${blockedCount}`}
                    />
                    <Divider />
                    <ProfileSection label="–ü–æ–¥–ø–∏—Å–∫–∞" value={''} onPress={() => setSettingHistory(prev => [...prev, 'subs'])} />
                    <ProfileSection label="–ü—Ä–∞–≤–∏–ª–∞" value={''} onPress={() => setSettingHistory(prev => [...prev, 'rules'])} />
                    <ProfileSection label="–ü–æ–¥–¥–µ—Ä–∂–∫–∞" value={''} onPress={() => setSettingHistory(prev => [...prev, 'support'])} />
                    <ProfileSection label="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" value={''} onPress={() => setSettingHistory(prev => [...prev, 'nontification'])} />
                    <Divider />
                    <ProfileSection
                      label="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
                      value=""
                      isDanger
                      isNone
                      onPress={() => setIsDeleteAccountModalVisible(true)}
                    />
                    <ProfileSection
                      label="–í—ã–π—Ç–∏"
                      value=""
                      isDanger
                      isNone
                      onPress={() => setIsLogoutModalVisible(true)}
                    />
                  </>
                ) : (
                  <>
                  {/* Subdivision Manager ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è */}
                  {(user.role === 'creator' || user.role === 'admin') && (
                    <SubdivisionManager 
                    ref={subdivisionManagerRef}
                    activeSubdivision={activeSubdivision}
                    setActiveSubdivision={setActiveSubdivision}
                    isAdmin={user.role === 'admin'} // üëà –≤–æ—Ç —Å—é–¥–∞ –ø–µ—Ä–µ–¥–∞—ë–º
                  />
                  
                  )}
                
                  {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è */}
                  {activeSubdivision && (
                    <>
                      {(user.role === 'creator') && (
                      <>
                      <ProfileSection
                      label='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
                      value=''
                      onPress={() => setSettingHistory(prev => [...prev, 'subInfo'])}
                      />
                   <ProfileSection 
                    label="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã" 
                    onPress={() => {
                      const admins = activeSubdivision?.admins || [];
                      setSettingHistory(prev => [...prev, 'admins']);
                    
                      if (admins.length === 0) {
                        setAddAdminMode(true);
                        setAdminSetupUser(null); // –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç AddAdmin
                      } else {
                        setAddAdminMode(false); // –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç Admins
                        setAdminSetupUser(null);
                      }
                    }}                    
                    value={
                      <View style={{ flexDirection: 'row', alignItems: 'center', gap: 6, paddingRight: 4 }}>
                        {activeSubdivision?.admins?.length === 0 && (
                          <Text style={{ color: '#000', fontSize: 12, fontWeight: '500' }}>–ù–∞–∑–Ω–∞—á–∏—Ç—å</Text>
                        )}
                        {activeSubdivision?.admins?.length > 0 && (
                          <Text>{activeSubdivision.admins.length}</Text>
                        )}
                      </View>
                    }
                  />

                  </>
                  )}
                      {/* –û–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø */}
                      {(user.role === 'creator' || user.role === 'admin') && (
                        <>                       
                          <ProfileSection
                            onPress={() => setSettingHistory(prev => [...prev, 'participants'])}
                            label="–£—á–∞—Å—Ç–Ω–∏–∫–∏"
                            value={
                              <View style={{ flexDirection: 'row', alignItems: 'center', gap: 6, paddingRight: 4 }}>
                                {activeSubdivision.pendingRequests?.length > 0 && (
                                  <View style={{
                                    width: 8,
                                    height: 8,
                                    borderRadius: 4,
                                    backgroundColor: '#41FF00',
                                  }} />
                                )}
                                <Text>{activeSubdivision?.members?.length || 0}</Text>
                              </View>
                            }
                          />
                        </>
                      )}
                
                      {/* –¢–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø—ã "–û—Å–Ω–æ–≤–∞" */}
                      {activeSubdivision.group === '–û—Å–Ω–æ–≤–∞' && (
                        <>
                          {(user.role === 'creator' || user.role === 'admin') && (
                            <ProfileSection 
                            onPress={() => setSettingHistory(prev => [...prev, 'market'])} 
                            label="–ú–∞—Ä–∫–µ—Ç" 
                            value={
                              <View style={{ flexDirection: 'row', alignItems: 'center', gap: 6, paddingRight: 4 }}>
                                {hasPendingMarkets && (
                                  <View style={{
                                    width: 8,
                                    height: 8,
                                    borderRadius: 4,
                                    backgroundColor: '#4CAF50',
                                  }} />
                                )}
                                <Text>{filteredMarkets.length}</Text>
                              </View>
                            }
                          />
                          
                          )}
                
                          {user.role === 'creator' && (
                            <>
                              <ProfileSection 
                                label="–ö—É–ø–æ–Ω—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è" 
                                value="" 
                                onPress={() => setSettingHistory(prev => [...prev, 'coupons'])} 
                              />
                              <ProfileSection 
                                label="–ö—É–ø–æ–Ω—ã –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤" 
                                value="" 
                                onPress={() => setSettingHistory(prev => [...prev, 'partner-coupons'])} 
                              />
                              <ProfileSection 
                                label="–¢–µ–≥–∏ SOS" 
                                value="" 
                                onPress={() => setSettingHistory(prev => [...prev, 'sosTags'])} 
                              />
                            </>
                          )}
                        </>
                      )}     
                      {/* –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è ‚Äî –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ creator */}
                      {user.role === 'creator' && (
                        <>
                          <ProfileSection
                            label="–£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"
                            value=""
                            isDanger
                            isNone
                            onPress={() => setIsDeleteSubdivisionModalVisible(true)}
                          />
                          <CustomModal
                            visible={isDeleteSubdivisionModalVisible}
                            onClose={() => setIsDeleteSubdivisionModalVisible(false)}
                            title="–£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ?"
                            buttons={[
                              {
                                label: '–£–¥–∞–ª–∏—Ç—å',
                                action: async () => {
                                  if (activeSubdivision) {
                                    try {
                                      await deleteSubdivision(activeSubdivision._id);
                                      subdivisionManagerRef.current?.reload();
                                      setActiveSubdivision(null);
                                      setIsDeleteSubdivisionModalVisible(false);
                                    } catch (error) {
                                      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è:', error);
                                    }
                                  }
                                },
                                type: 'redText',
                              },
                              {
                                label: '–û—Ç–º–µ–Ω–∞',
                                action: () => setIsDeleteSubdivisionModalVisible(false),
                                type: 'grayBack',
                              },
                            ]}
                            buttonLayout="column"
                          />
                        </>
                      )}
                    </>
                  )}
                  </>                
                )}
              </View>
            </View>
          )}
        </ScrollView>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#fff',
    flex: 1,
    alignItems: 'center',
  },
  contentContainer:{
    flex: 1, 
    maxWidth: 600,
    width: '100%',   
    height: '100%',
    paddingTop: 58,
  },  
  headerIcons: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 50,
    width: '100%',
    position: 'relative',
  
  },
  backIcon:{
    position: 'absolute',
    left: 16
  },
  plusIcon:{
    position: 'absolute',
    right: 16
  },
  headerTitle: {
    fontSize: 15,
    fontWeight: 'bold',
    color: '#000',
  },
  mainContentContainer: {
    flex: 1,
    width: '100%',
    height: '100%',
    alignItems: 'center',
  },
  profileHeader: {
    alignItems: 'center',
  },
  profileImage: {
    width: 100,
    height: 100,
    borderRadius: 50,
    borderWidth: 2,
    borderColor: '#ddd',
  },
  username: {
    fontSize: 16,
    color: '#555',
    marginTop: 8,
  },
  content:{
    flex: 1,
    height: '100%'
  },
  mainContent: {
    width: '100%',
  },
  divider: {
    backgroundColor: '#ececec',
    marginBottom: 26,
    height: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.4)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContainer: {
    width: 280,
    backgroundColor: '#fff',
    borderRadius: 16,
    alignItems: 'center',
  },
  modalTitle: {
    fontSize: 14,
    fontWeight: '700',
    paddingVertical: 35,
    color: '#000',
  },
  modalButtons: {
    justifyContent: 'space-between',
    width: '100%',
    alignItems: 'center',
  },
  logoutButton: {
    paddingVertical: 25,
    alignItems: 'center',
    borderTopWidth: 0.5,
    borderTopColor: '#ECECEC', 
    width: '100%', 
  },
  logoutText: {
    color: '#f00',
    fontSize: 14,
    fontWeight: '700',
  },
  cancelButton: {
    paddingVertical: 25,
    alignItems: 'center',
    borderTopWidth: 0.5,
    borderTopColor: '#ECECEC', 
    width: '100%', 
  },  
  cancelText: {
    color: '#000',
    fontSize: 14,
    fontWeight: '700',
  },
  buttonRow:{ 
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingBottom: 40,
  },
  buttonRowItem:{
    justifyContent: 'center',
    flex: 1
  },
  typeButton:{
    borderBottomWidth: 0.5,
    borderColor: '#ECECEC',
  },
  activeTypeButton:{
    borderBottomWidth: 2,
    borderColor: '#000',
  },
  buttonRowText:{
    textAlign: 'center',
    fontSize: 12,
    fontWeight: '700',
    color:'#ECECEC',
    paddingBottom: 12
  },
  buttonRowTextSelected:{
    color:'#000'
  },
});

export default SettingsScreen;