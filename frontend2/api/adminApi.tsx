import { MarketDataProps } from "@/types/market";
import api, { UserDataProps, get, patch, post, del, put } from ".";

import { Subdivision } from '@/types/subdivision'; // –µ—Å–ª–∏ —Ç–∏–ø—ã –≤—ã–Ω–µ—Å–µ–Ω—ã
import { SubdivisionAdminPermissions } from "@/types/subdivisionAdmin";

export interface UserStatsProps {
  sosPublished: number;
  sosResponses: number;
  connectedUsers: number;
  generalTasks: number;
  generalHelp: number;
  marketDeals: number;
  signalFire: number;
  sporterGreetings: number;
  complaintMentions: number;
  awards: number;
}

export interface FreezeDataProps {
  _id: string;
  entityId: string;
  entityType: "user" | "market";
  frozenActions: string[];
  startDate: string;
  endDate: string;
  reason?: string;
}

export interface FreezeStatsProps {
  totalFreezes: number;
  activeFreezes: number;
  actionsStats: {
    sos: { active: number; past: number };
    market: { active: number; past: number };
  };
}

export interface DeleteReasonProps {
  _id: string;
  name: string;
}

export interface TopUserProps {
  id: string;
  username: string;
  rating: number;
  generalTasks: number;
  sosResponses: number;
}

export interface MonthlyTopUsersResponse {
  topByRating: TopUserProps[];
  topByTasks: TopUserProps[];
  topBySOS: TopUserProps[];
}

export interface UserMatchResult {
  emailMatches: number;
  phoneMatches: number;
  nameMatches: number;
  totalMatches: number;
}

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è)
export const getUserData = async (userId: string): Promise<UserDataProps> => {
  try {
    const response = await get(`/admin/users/${userId}`);
    return response.user;
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.message);
    throw error;
  }
};

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const getUserVerificationData = async (userId: string): Promise<UserDataProps> => {
  try {
    const response = await get(`/admin/users/${userId}/verification`);
    return response.user;
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error.message);
    throw error;
  }
};

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const updateUserVerificationStatus = async (
  userId: string,
  status: string,
  rejectionReason?: string
) => {
  const payload: any = { status };

  if (status === 'rejected') {
    payload.rejectionReason = rejectionReason || '';
  }

  try {
    const response = await patch(`/admin/users/${userId}/verification`, payload);
    return response;
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.message);
    throw error;
  }
};

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserStats = async (userId: string): Promise<UserStatsProps> => {
  try {
    const response = await get(`/admin/users/${userId}/stats`);
    return response.stats;
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.message);
    throw error;
  }
};

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–º–æ—Ä–æ–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserFreezes = async (userId: string): Promise<FreezeDataProps[]> => {
  try {
    const response = await get(`/admin/freeze/user/${userId}`);
    return response;
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–æ—Ä–æ–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.message);
    throw error;
  }
};

// ‚úÖ –ó–∞–º–æ—Ä–æ–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const freezeUser = async (userId: string, frozenActions: string[], duration: number, reason?: string) => {
  try {
    console.log("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", { userId, frozenActions, duration, reason });

    const response = await post(`/admin/freeze`, {
      entityId: userId,
      entityType: "user",
      frozenActions,
      duration,
      reason,
    });

    console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response);
    return response;
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–æ—Ä–æ–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.message);
    throw error;
  }
};

// ‚úÖ –†–∞–∑–º–æ—Ä–æ–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞–º–æ—Ä–æ–∑–∫–µ)
export const unfreezeUser = async (freezeId: string) => {
  try {
    const response = await del(`/admin/freeze/${freezeId}`);
    return response;
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.message);
    throw error;
  }
};

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const checkUserFreeze = async (userId: string, action: string): Promise<boolean> => {
  try {
    const response = await get(`/admin/freeze/user/${userId}/${action}`);
    return response.frozen;
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏:", error.message);
    throw error;
  }
};

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–º–æ—Ä–æ–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserFreezeStats = async (userId: string): Promise<FreezeStatsProps> => {
  try {
    const response = await get(`/admin/users/${userId}/freeze-stats`);
    return response;
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–º–æ—Ä–æ–∑–æ–∫:", error.message);
    throw error;
  }
};

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏—á–∏–Ω —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
export const getDeleteAccountReasons = async (): Promise<DeleteReasonProps[]> => {
  const url = `/admin/delete/topics`;
  console.log("üì° [getDeleteAccountReasons] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –Ω–∞:", url);
  try {
    const response = await get(url);
    console.log("‚úÖ [getDeleteAccountReasons] –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response);
    return response;
  } catch (error: any) {
    console.error("‚ùå [getDeleteAccountReasons] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏—á–∏–Ω —É–¥–∞–ª–µ–Ω–∏—è:", error.message);
    throw error;
  }
};

// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –º–∞—Ä–∫–µ—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã
export const deleteEntity = async (entityId: string, entityType: "user" | "market", reasonId: string) => {
  try {
    const url = `/admin/delete/${entityType}/${entityId}`;
    console.log("üì° [deleteEntity] POST", url, "BODY:", { reasonId });

    const response = await post(url, { reasonId });
    console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response);
    return response;
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", error.message);
    throw error;
  }
};

export const getMarketByUserId = async (userId: string): Promise<MarketDataProps | null> => {
  try {
    const response = await get(`/admin/market/by-user/${userId}`);
    return {
      ...response.market,
      id: response.market._id, // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    };
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ç–∞ –ø–æ userId:", error.message);
    return null;
  }
};

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ—Å—è—Ü–∞
export const getMonthlyTopUsers = async (): Promise<MonthlyTopUsersResponse> => {
  try {
    const response = await get('/admin/top-users');
    return response;
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø-3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error.message);
    throw error;
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
 * @param subdivisionId ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
 * @param updates –û–±–Ω–æ–≤–ª—è–µ–º—ã–µ –ø–æ–ª—è
 * @returns –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
 */
export const updateSubdivision = async (
  subdivisionId: string,
  data: Record<string, any>,
  files?: FormData
): Promise<any> => {
  try {
    const formData = files || new FormData();

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    for (const key in data) {
      if (data.hasOwnProperty(key)) {
        formData.append(key, data[key]);
      }
    }

    const response = await patch(`/admin/subdivisions/${subdivisionId}`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });

    return response;
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ updateSubdivision:', error);
    throw error;
  }
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
 * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
 * @returns –°–æ–∑–¥–∞–Ω–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
 */
export const createSubdivision = async (params: {
  cityId: string;
  group: string; // —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—É—é –≥—Ä—É–ø–ø—É
  description?: string;
  avatar?: string;
}): Promise<Subdivision> => {
  try {
    const response = await post('/admin/subdivisions', params);
    return response.subdivision;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è:', error.message);
    throw error;
  }
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
 * @param subdivisionId ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
 */
export const deleteSubdivision = async (subdivisionId: string): Promise<void> => {
  try {
    await del(`/admin/subdivisions/${subdivisionId}`);
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è:', error.message);
    throw error;
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
 * @returns –ú–∞—Å—Å–∏–≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
 */
export const getAllSubdivisions = async (): Promise<Subdivision[]> => {
  try {
    const response = await get('/admin/subdivisions');
    return response.subdivisions;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π:', error.message);
    throw error;
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
 * @param cityId ID –≥–æ—Ä–æ–¥–∞
 * @returns –ú–∞—Å—Å–∏–≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –≥–æ—Ä–æ–¥–∞
 */
export const getSubdivisionsByCity = async (cityId: string): Promise<Subdivision[]> => {
  try {
    const response = await get(`/admin/subdivisions/city/${cityId}`);
    return response.subdivisions;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –≥–æ—Ä–æ–¥–∞:', error.message);
    throw error;
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ ID
 * @param subdivisionId ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
 * @returns –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
 */
export const getSubdivisionById = async (subdivisionId: string): Promise<Subdivision | null> => {
  try {
    const allSubdivisions = await getAllSubdivisions();
    return allSubdivisions.find(sub => sub._id === subdivisionId) || null;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è:', error.message);
    throw error;
  }
};

export const addSubdivisionAdmin = async (params: {
  subdivisionId: string;
  userId: string;
  permissions: SubdivisionAdminPermissions;
}) => {
  try {
    const response = await post('/admin/subdivisions/admins', params);
    return response.admin;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞:', error.message);
    throw error;
  }
};

export const updateSubdivisionAdmin = async (
  adminId: string,
  permissions: SubdivisionAdminPermissions
) => {
  try {
    const response = await patch(`/admin/subdivisions/admins/${adminId}`, { permissions });
    return response.admin;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞:', error.message);
    throw error;
  }
};

export const removeSubdivisionAdmin = async (adminId: string) => {
  try {
    const response = await del(`/admin/subdivisions/admins/${adminId}`);
    return response;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞:', error.message);
    throw error;
  }
};

export const getSubdivisionAdminByUserId = async (subdivisionId: string, userId: string) => {
  const res = await get(`/admin/subdivisions/${subdivisionId}/admin/${userId}`);
  return res?.admin;
};


export const getUserMatches = async (userId: string): Promise<UserMatchResult> => {
  try {
    const response = await get(`/admin/users/${userId}/matches`);
    return response.matches;
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:", error.message);
    throw error;
  }
};

export const getUserMatchesDetailed = async (userId: string): Promise<UserDataProps[]> => {
  try {
    const response = await get(`/admin/users/${userId}/matches/detailed`);
    return response.users;
  } catch (error: any) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:", error.message);
    throw error;
  }
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É–ø–æ–Ω–∞
 * @param data –î–∞–Ω–Ω—ã–µ –∫—É–ø–æ–Ω–∞
 * @param imageFile (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const createCoupon = async (formData: FormData): Promise<void> => {
  try {
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º formData –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
    const res = await post('/admin/coupons', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', res);
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—É–ø–æ–Ω–∞:', error);
    throw error;
  }
};

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—É–ø–æ–Ω–∞
 * @param couponId ID –∫—É–ø–æ–Ω–∞
 * @param status –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (active | assigned | archived)
 */
export const updateCouponStatus = async (
  couponId: string,
  status: 'active' | 'assigned' | 'archived'
): Promise<any> => {
  try {
    const response = await patch(`/admin/coupons/${couponId}/status`, { status });
    return response;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫—É–ø–æ–Ω–∞:', error.message);
    throw error;
  }
};

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∫—É–ø–æ–Ω–∞
 * @param couponId ID –∫—É–ø–æ–Ω–∞
 */
export const deleteCoupon = async (couponId: string): Promise<void> => {
  try {
    await del(`/admin/coupons/${couponId}`);
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É–ø–æ–Ω–∞:', error.message);
    throw error;
  }
};

export const getAllCoupons = async (): Promise<any[]> => {
  try {
    const res = await get('/admin/coupons');
    return res.coupons;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∫—É–ø–æ–Ω–æ–≤:', error);
    return [];
  }
};

export const getCouponsBySubdivision = async (subdivisionId: string): Promise<any[]> => {
  try {
    const res = await get(`/admin/coupons/subdivision/${subdivisionId}`);
    return res.coupons;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É–ø–æ–Ω–æ–≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è:', error);
    return [];
  }
};

export const getAssignedCoupons = async (userId: string): Promise<any[]> => {
  try {
    const res = await get(`/admin/coupons/assigned/${userId}`);
    return res.coupons;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤:', error);
    return [];
  }
};

export const assignCoupon = async (couponId: string, userId: string): Promise<any> => {
  try {
    const res = await post(`/admin/coupons/${couponId}/assign`, { userId });
    return res;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∫—É–ø–æ–Ω–∞:', error);
    throw error;
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –∫—É–ø–æ–Ω—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export const getCouponsByUser = async (userId: string): Promise<any[]> => {
  const res = await get(`/admin/coupons/user/${userId}`);
  return res.coupons;
};