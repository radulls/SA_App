import EventEmitter, { type EventSubscription } from 'expo-modules-core/src/EventEmitter';
import { LegacyEventEmitter } from 'expo-modules-core/src/LegacyEventEmitter';
import NativeModule from 'expo-modules-core/src/NativeModule';
import NativeModulesProxy from 'expo-modules-core/src/NativeModulesProxy';
import type { ProxyNativeModule } from 'expo-modules-core/src/NativeModulesProxy.types';
import { requireNativeViewManager } from 'expo-modules-core/src/NativeViewManagerAdapter';
import Platform from 'expo-modules-core/src/Platform';
import SharedObject from 'expo-modules-core/src/SharedObject';
import SharedRef from 'expo-modules-core/src/SharedRef';
import { CodedError } from 'expo-modules-core/src/errors/CodedError';
import { UnavailabilityError } from 'expo-modules-core/src/errors/UnavailabilityError';
import 'expo-modules-core/src/sweet/setUpErrorManager.fx';
import 'expo-modules-core/src/web';
export type * from 'expo-modules-core/src/ts-declarations/global';
export { default as uuid } from 'expo-modules-core/src/uuid';
export { ProxyNativeModule, Platform, requireNativeViewManager, EventEmitter, SharedObject, SharedRef, NativeModule, CodedError, UnavailabilityError, EventSubscription, NativeModulesProxy, LegacyEventEmitter, };
export * from 'expo-modules-core/src/requireNativeModule';
export * from 'expo-modules-core/src/registerWebModule';
export * from 'expo-modules-core/src/TypedArrays.types';
export * from 'expo-modules-core/src/PermissionsInterface';
export * from 'expo-modules-core/src/PermissionsHook';
export * from 'expo-modules-core/src/Refs';
export * from 'expo-modules-core/src/hooks/useReleasingSharedObject';
export * from 'expo-modules-core/src/reload';
//# sourceMappingURL=index.d.ts.map