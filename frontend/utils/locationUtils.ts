export const fixAddressOrder = (address: string, locality: string) => {
  const addressParts = address.split(', ').map((part) => part.trim());

  // –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –≤ –∫–æ–Ω—Ü–µ ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ
  if (addressParts.length > 1 && addressParts[addressParts.length - 1] === locality) {
    console.log('‚ö† –ì–æ—Ä–æ–¥ –æ–∫–∞–∑–∞–ª—Å—è –≤ –∫–æ–Ω—Ü–µ, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫!');
    return [locality, ...addressParts.slice(0, -1)].join(', ');
  }

  return address;
};

export const fetchAddressFromCoordinates = async (
  lat: number,
  lon: number,
  setAddress: (address: string) => void
) => {
  try {
    console.log('üöÄ –í—ã–∑–≤–∞–Ω fetchAddressFromCoordinates:', lat, lon);

    const response = await fetch(
      `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}&addressdetails=1&extratags=1`
    );

    if (!response.ok) {
      throw new Error(`HTTP –æ—à–∏–±–∫–∞! –°—Ç–∞—Ç—É—Å: ${response.status}`);
    }

    const data = await response.json();
    console.log('üì© –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç API:', data);

    if (data.address) {
      console.log('üîç –†–∞–∑–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç address:', data.address);

      // üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–í–´–ú!)
      const locality =
        data.address.city ||
        data.address.town ||
        data.address.village ||
        data.address.suburb ||
        data.address.city_district ||
        data.address.county ||
        data.address.state ||
        '';

      // üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–ª–∏—Ü—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
      const street = data.address.road || '';

      // üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –¥–æ–º–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
      const house = data.address.house_number || '';

      console.log('‚úÖ –ì–æ—Ä–æ–¥:', locality);
      console.log('‚úÖ –£–ª–∏—Ü–∞:', street);
      console.log('‚úÖ –î–æ–º:', house);

      // üîπ –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å
      let addressParts = [];

      if (street) addressParts.push(street); // –£–ª–∏—Ü–∞
      if (house) addressParts.push(house); // –î–æ–º
      if (locality) addressParts.push(locality); // –ì–æ—Ä–æ–¥

      let formattedAddress = addressParts.join(', '); // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É

      // üî• **–§–∏–∫—Å–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø–µ—Ä–µ–¥ `setAddress()`**
      formattedAddress = fixAddressOrder(formattedAddress, locality);

      console.log('üìù –ò—Ç–æ–≥–æ–≤—ã–π –∞–¥—Ä–µ—Å –ø–µ—Ä–µ–¥ setAddress:', formattedAddress);
      setAddress(formattedAddress);
    } else {
      console.warn('‚ö† –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      setAddress('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
    setAddress('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥—Ä–µ—Å–∞');
  }
};
