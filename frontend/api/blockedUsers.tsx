import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';
import Toast from 'react-native-toast-message';
import api, { UserDataProps } from '.';

const API_BASE_URL = 'http://89.108.118.249:5001/api';

export interface BlockedUserData {
  _id: string; 
  blocked: UserDataProps; 
}

/**
 * üìå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
 */
export const blockUser = async (userId: string) => {
  try {
    const token = await AsyncStorage.getItem('token');

    if (!token) {
      Toast.show({ type: 'error', text1: '–û—à–∏–±–∫–∞', text2: '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', position: 'bottom' });
      return;
    }

    await axios.post(
      `${API_BASE_URL}/blockedUsers/block`,
      { userId },
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      }
    );

    Toast.show({ type: 'success', text1: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', position: 'bottom' });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
    Toast.show({ type: 'error', text1: '–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.', position: 'bottom' });
  }
};

/**
 * üìå –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
 */
export const unblockUser = async (userId: string) => {
  try {
    const token = await AsyncStorage.getItem('token');

    if (!token) {
      Toast.show({ type: 'error', text1: '–û—à–∏–±–∫–∞', text2: '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', position: 'bottom' });
      return;
    }

    await axios.post(
      `${API_BASE_URL}/blockedUsers/unblock`,
      { userId },
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      }
    );

    Toast.show({ type: 'success', text1: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', position: 'bottom' });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
    Toast.show({ type: 'error', text1: '–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.', position: 'bottom' });
  }
};

/**
 * üìå –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
 * @returns {boolean} - true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∞—á–µ false
 */
export const checkIfBlocked = async (userId: string): Promise<boolean> => {
  try {
    const token = await AsyncStorage.getItem('token');

    if (!token) {
      console.error('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return false;
    }

    const response = await axios.get(
      `${API_BASE_URL}/blockedUsers/isBlocked/${userId}`,
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      }
    );

    return response.data.isBlocked;
  } catch (error: unknown) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', (error as Error).message);
    return false;
  }
};

export const getBlockedUsers = async (): Promise<BlockedUserData[]> => {
  try {
    const token = await AsyncStorage.getItem('token');
    if (!token) throw new Error('‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!');

    console.log("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");
    
    const response = await axios.get(`${API_BASE_URL}/blockedUsers/blocked-list`, {
      headers: { Authorization: `Bearer ${token}` },
    });

    console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", response.data.blockedUsers);

    return response.data.blockedUsers;
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö:", error.response?.data || error.message);
    throw error;
  }
};
