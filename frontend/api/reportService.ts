import axios, { AxiosInstance } from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';

const API_BASE_URL = 'http://89.108.118.249:5001/api';

// –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios
const api: AxiosInstance = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–º –∂–∞–ª–æ–±
export const getReportTopics = async (): Promise<{ _id: string; name: string }[]> => {
  try {
    console.log("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º –∂–∞–ª–æ–±...");
    const response = await api.get('/reports/topics');
    console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ç–µ–º—ã –∂–∞–ª–æ–±:", response.data);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º –∂–∞–ª–æ–±:', error.message, error.response?.data);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–º—ã –∂–∞–ª–æ–±.');
  }
};


// –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã
export const reportUser = async (reportedUserId: string, topicId: string): Promise<any> => {
  try {
    const token = await AsyncStorage.getItem('token');
    if (!token) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.');
    }

    console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã: reportedUserId=${reportedUserId}, topicId=${topicId}`);

    const response = await api.post(
      '/reports/submit',
      { reportedUserId, topicId },
      { headers: { Authorization: `Bearer ${token}` } }
    );

    console.log("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", response.data);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã:', error.message);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};


// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∂–∞–ª–æ–± (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
export const getUserReports = async (): Promise<any[]> => {
  try {
    const token = await AsyncStorage.getItem('token');
    if (!token) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.');
    }

    const response = await api.get('/reports/all', {
      headers: { Authorization: `Bearer ${token}` },
    });

    return response.data;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∂–∞–ª–æ–±:', error.message);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∂–∞–ª–æ–±—ã.');
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
export const deleteReport = async (reportId: string): Promise<any> => {
  try {
    const token = await AsyncStorage.getItem('token');
    if (!token) {
      throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.');
    }

    const response = await api.delete(`/reports/${reportId}`, {
      headers: { Authorization: `Bearer ${token}` },
    });

    return response.data;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã:', error.message);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∂–∞–ª–æ–±—É.');
  }
};

export default api;
