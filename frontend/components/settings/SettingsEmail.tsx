import React, { useState } from 'react';
import { View, ScrollView, Text, Pressable, Alert } from 'react-native';
import InputField from '../eventCreation/InputField';
import ContinueButton from '../eventCreation/ContinueButton';
import { styles } from '@/components/settings/SettingsStyle';
import { SettingsProps } from '@/app/settings';
import { sendVerificationCode, verifyEmailCode, checkEmail } from '@/api';
import ErrorMessage from '../ErrorMessage';


const SettingsEmail: React.FC<SettingsProps> = ({ user, onBack }) => {
  const [email, setEmail] = useState(user.email ?? '');
  const [isEmailVisible, setIsEmailVisible] = useState(false);
  const [newEmail, setNewEmail] = useState('');
  const [verificationCode, setVerificationCode] = useState('');
  const [isVerifying, setIsVerifying] = useState(false);
  const [isSendCodeDisabled, setIsSendCodeDisabled] = useState(true);
  const [isConfirmDisabled, setIsConfirmDisabled] = useState(true);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  // –ú–∞—Å–∫–∏—Ä—É–µ–º email
  const maskEmail = (email: string) => {
    if (!email || typeof email !== 'string') return ''; // –ï—Å–ª–∏ `undefined`, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if (!email.includes('@')) return email;
    const [name, domain] = email.split('@');
    const maskedName = name.length > 2 ? name[0] + '***' + name.slice(-1) : name[0] + '***';
    return `${maskedName}@${domain}`;
  };
  
  const handleSendCode = async () => {
    if (!newEmail.includes('@')) {
      setErrorMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.');
      return;
    }
    console.log("üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", { email: newEmail, code: verificationCode });

    try {
      setErrorMessage(null);
      console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å email:", newEmail);
  
      await checkEmail(newEmail);
  
      console.log("üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞:", newEmail);
      console.log("üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", { email: newEmail, code: verificationCode });

      await sendVerificationCode(newEmail);
  
      setIsVerifying(true);
      setIsSendCodeDisabled(true);
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email:", error);
    }
  };
  
  const handleVerifyCode = async () => {
    console.log("üöÄ –§—É–Ω–∫—Ü–∏—è handleVerifyCode –≤—ã–∑–≤–∞–Ω–∞");
  
    if (verificationCode.length !== 6) {
      console.log("‚ùå –û—à–∏–±–∫–∞: –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Å–∏–º–≤–æ–ª–æ–≤.");
      setErrorMessage("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Å–∏–º–≤–æ–ª–æ–≤.");
      return;
    }
  
    try {
      console.log("üì© –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥:", verificationCode);
      setErrorMessage(null);
  
      const response = await verifyEmailCode(newEmail, verificationCode);
  
      console.log("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response);
  
      if (!response || !response.email) {
        console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª email.");
        setErrorMessage("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        return;
      }
  
      console.log("üì© –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º email –≤ UI:", response.email);
      setEmail(response.email);
      setIsVerifying(false);
      setNewEmail('');
      setVerificationCode('');
      setIsSendCodeDisabled(true);
      Alert.alert("–£—Å–ø–µ—Ö", "Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!");
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞:", error);
  
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      const serverMessage = error.response?.data?.message || error.message;
  
      console.log("üî¥ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", serverMessage);
  
      // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
      if (serverMessage === "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.") {
        setErrorMessage(serverMessage);
      } else if (serverMessage === "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫") {
        setErrorMessage("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      } else {
        setErrorMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞.");
      }
    }
  };
  
  
  return (
    <View style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollViewContent} style={styles.scrollView}>
        {/* –¢–µ–∫—É—â–∞—è –ø–æ—á—Ç–∞ */}
        <View style={styles.topItems}>
          <Text style={styles.topText}>
            –ü—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è —ç–ª. –ø–æ—á—Ç–∞:{'\n'}
            {isEmailVisible ? email : maskEmail(email)}
          </Text>
          <Pressable onPress={() => setIsEmailVisible(!isEmailVisible)}>
            <Text style={styles.showButton}>{isEmailVisible ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'}</Text>
          </Pressable>
        </View>

        {/* ‚úÖ –ö–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥" */}
        {!isVerifying && newEmail.length > 0 && (
          <View style={styles.buttonContainer}>
            <Pressable 
              onPress={handleSendCode} 
              style={[styles.confirmButton, { opacity: isSendCodeDisabled ? 0.5 : 1 }]}
              disabled={isSendCodeDisabled}
            >
              <Text style={styles.buttonText}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥</Text>
            </Pressable>
          </View>
        )}

        <View style={styles.formWrapper}>
          <Text style={styles.subtitle}>
            {isVerifying
              ? '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É.'
              : '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–æ–≤–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É.'
            }
          </Text>

          {/* ‚úÖ –ò–Ω–ø—É—Ç –º–µ–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
          <InputField 
            label={isVerifying ? "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" : ""}
            value={isVerifying ? verificationCode : newEmail} 
            onChangeText={(text) => {
              if (isVerifying) {
                setVerificationCode(text);
                setIsConfirmDisabled(text.length !== 6);
              } else {
                setNewEmail(text);
                setIsSendCodeDisabled(!text.includes('@'));
              }
            }}
          />
        </View>
        {errorMessage ? (
          <View style={styles.errorContainer}>
            <ErrorMessage message={errorMessage} style={styles.errorMessage} />
          </View>
        ) : null}
        {/* ‚úÖ –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" */}
        {isVerifying && (
          <View style={styles.approveButtonContainer}>
            <Pressable 
              onPress={handleVerifyCode} 
              style={[styles.confirmButton, styles.approveButton, { opacity: isConfirmDisabled ? 0.5 : 1 }]}
              disabled={isConfirmDisabled}
            >
              <Text style={[styles.buttonText, styles.approveText]}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</Text>
            </Pressable>
          </View>
        )}      
      </ScrollView>
      {/* –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" */}
      <View style={styles.ContinueButton}>
        <ContinueButton onPress={onBack} text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" />
      </View>
    </View>
  );
};

export default SettingsEmail;