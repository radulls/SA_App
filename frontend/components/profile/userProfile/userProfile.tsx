import { IMAGE_URL, UserDataProps, checkIfSubscribed, getUserProfileById, getUserProfile } from '@/api';
import { getReportTopics } from '@/api/reportService';
import React, { useEffect, useRef, useState } from 'react';
import { View, ActivityIndicator, Text, ScrollView, Image, TouchableOpacity, Share, StyleSheet, Animated } from 'react-native';
import { useLocalSearchParams, useRouter, useSegments } from 'expo-router';
import ProfileHeader from '../ProfileHeader';
import ProfileStats from '../ProfileStats';
import UserProfileButtons from './userProfileButtons';
import IconBack from '@/components/svgConvertedIcons/iconBack';
import MoreOptionsIcon from '@/components/svgConvertedIcons/MoreOptionsIcon';
import BottomSheetMenu from '@/components/Menu/BottomSheetMenu';
import ReportMenu from '@/components/Menu/ReportMenu';
import CopyLink from '@/components/svgConvertedIcons/copyLink';
import ShareIcon from '@/components/svgConvertedIcons/shareIcon';
import Toast from 'react-native-toast-message';
import * as Clipboard from 'expo-clipboard';
import * as Linking from 'expo-linking';
import { blockUser, checkIfBlocked, unblockUser } from '@/api/blockedUsers';

const UserProfile: React.FC = () => {
  const [loading, setLoading] = useState<boolean>(true);
  const [user, setUser] = useState<UserDataProps | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isMenuVisible, setIsMenuVisible] = useState(false);
  const [isReportMenuVisible, setIsReportMenuVisible] = useState(false);
  const [reportTopics, setReportTopics] = useState<{ _id: string; name: string }[]>([]);
  const router = useRouter();
  const [closeAnimation, setCloseAnimation] = useState<(() => void) | null>(null);
  const [loggedInUser, setLoggedInUser] = useState<UserDataProps | null>(null); // ‚úÖ –ù–æ–≤—ã–π —Å—Ç–µ–π—Ç
  const [isBlocked, setIsBlocked] = useState<boolean>(false);

  //  –ü–æ–ª—É—á–∞–µ–º `userId` –∏–∑ `useLocalSearchParams()` –∏–ª–∏ `useSegments()`
  const params = useLocalSearchParams();
  const segments = useSegments();
  // let userId = '6787bfd597715a6fc67231c9'

  let userId = Array.isArray(params.userId) ? params.userId[0] : params.userId;
  if (!userId && segments.length > 1) {
    userId = segments[segments.length - 1];
  }

  console.log("üì° useLocalSearchParams():", params);
  console.log("üìå –ü–æ–ª—É—á–µ–Ω–Ω—ã–π userId:", userId);

  useEffect(() => {
    if (!userId) {
      console.error("‚ùå –û—à–∏–±–∫–∞: userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
      setError("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      setLoading(false);
      return;
    }

    const fetchUserData = async () => {
      try {
        setLoading(true);
        const userData = await getUserProfileById(userId);
        setUser(userData);
  
        const subscriptionStatus = await checkIfSubscribed(userId);
        setUser((prevUser) => prevUser ? { ...prevUser, isSubscribed: subscriptionStatus } : prevUser);
  
        const blockedStatus = await checkIfBlocked(userId); // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        setIsBlocked(blockedStatus);
      } catch (err: any) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err.message);
        setError(err.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.");
      } finally {
        setLoading(false);
      }
    };

    fetchUserData();
  }, [userId]);

  useEffect(() => {
    const fetchLoggedInUser = async () => {
      try {
        console.log("üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
        const userData = await getUserProfile(); //  –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ
        console.log(" –î–∞–Ω–Ω—ã–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userData);
        setLoggedInUser(userData); //  –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–µ–π—Ç
      } catch (error) {
        console.error(" –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      }
    };
  
    fetchLoggedInUser();
  }, []);

  if (loading) return <ActivityIndicator size="large" color="#000" />;
  if (error) return <Text style={styles.errorText}>–û—à–∏–±–∫–∞: {error}</Text>;
  if (!user) return <Text style={styles.errorText}>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</Text>;

  // üìå –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
  const copyToClipboard = async () => {
    if (!userId || typeof userId !== "string") {
      console.error("‚ùå –û—à–∏–±–∫–∞: userId –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:", userId);
      setError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }
    try {
      const deepLink = Linking.createURL(`/profile/${userId}`);
      await Clipboard.setStringAsync(deepLink);
  
      if (closeAnimation) {
        closeAnimation(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø–ª–∞–≤–Ω–æ
        setTimeout(() => {
          Toast.show({ type: 'success', text1: '–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', position: 'bottom' });
        }, 300); // –ó–∞–ø—É—Å–∫–∞–µ–º `Toast` –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (200–º—Å)
      } else {
        setIsMenuVisible(false);
        Toast.show({ type: 'success', text1: '–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', position: 'bottom' });
      }
    } catch (err) {
      Toast.show({ type: 'error', text1: '–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.', position: 'bottom' });
    }
  };

  // üìå –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π
  const shareLink = async () => {
    if (!userId) {
      Toast.show({ type: 'error', text1: '–û—à–∏–±–∫–∞', text2: 'ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.', position: 'bottom' });
      return;
    }
    try {
      const deepLink = Linking.createURL(`/profile/${userId}`);
      await Share.share({ message: `–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: ${deepLink}`, url: deepLink });
    } catch (err) {
      Toast.show({ type: 'error', text1: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∞—Ä–∏–Ω–≥–µ.', position: 'bottom' });
    }
  };

  // üìå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleBlockUser = async () => {
    try {
      await blockUser(userId);
      setIsBlocked(true);
      Toast.show({ type: 'success', text1: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', position: 'bottom' });
      setIsMenuVisible(false);
    } catch (error) {
      Toast.show({ type: 'error', text1: '–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.', position: 'bottom' });
    }
  };
  
  const handleUnblockUser = async () => {
    try {
      await unblockUser(userId);
      setIsBlocked(false);
      Toast.show({ type: 'success', text1: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', position: 'bottom' });
      setIsMenuVisible(false);
    } catch (error) {
      Toast.show({ type: 'error', text1: '–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.', position: 'bottom' });
    }
  };
  

  // üìå –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∂–∞–ª–æ–±
  const openReportMenu = async () => {
    if (closeAnimation) {
      closeAnimation(); // ‚úÖ –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
      setTimeout(() => {
        getReportTopics()
          .then((topics) => {
            setReportTopics(topics);
            setIsReportMenuVisible(true);
          })
          .catch(() => {
            Toast.show({ type: 'error', text1: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–º—ã.', position: 'bottom' });
          });
      }, 200); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –∂–∞–ª–æ–± –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    } else {
      console.warn("‚ö† closeAnimation –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
      setIsMenuVisible(false);
      setTimeout(() => setIsReportMenuVisible(true), 200);
    }
  }; 

  return (
    <View style={styles.container}>
    <ScrollView contentContainerStyle={styles.scrollViewContent}>
      <View style={styles.contentContainer}>
        <View style={styles.coverImageContainer}>
          {user?.backgroundImage ? (
            <Image resizeMode="cover" source={{ uri: `${IMAGE_URL}${user.backgroundImage}` }} style={styles.coverImage} />
          ) : (
            <View style={styles.coverImage} />
          )}
        </View>
        <View style={styles.headerButtons}>
          <View>
            <IconBack width={14} height={14} onPress={() => router.back()} />
          </View>
          <TouchableOpacity onPress={() => setIsMenuVisible(true)}>
            <MoreOptionsIcon width={21} height={12} />
          </TouchableOpacity>
        </View>
        <ProfileHeader user={user} isOwnProfile={false} />
        <ProfileStats user={user} />
        <UserProfileButtons
          userId={userId}
          initialSubscribed={user?.isSubscribed ?? false}
          onSubscriptionChange={(status) => {
            setUser((prevUser) => (prevUser ? { ...prevUser, isSubscribed: status } : prevUser));
          }}
        />
      </View>
    </ScrollView>
    <BottomSheetMenu
      key={loggedInUser?.role} //  –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏
      isVisible={isMenuVisible}
      onClose={() => setIsMenuVisible(false)}
      setCloseAnimation={setCloseAnimation}
      buttons={[
        { label: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', onPress: copyToClipboard, icon: <CopyLink fill={'#000'} />, isRowButton: true },
        { label: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —á–µ—Ä–µ–∑‚Ä¶', onPress: shareLink, icon: <ShareIcon fill={'#000'} />, isRowButton: true },
        loggedInUser?.role === 'admin' || loggedInUser?.role === 'creator' // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–µ–Ω–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          ? { label: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', onPress: () => router.push(`/home`), icon: null, isRowButton: false }
          : { label: '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', onPress: openReportMenu, icon: null, isRowButton: false },
          isBlocked
          ? { label: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', onPress: handleUnblockUser, icon: null, isRowButton: false }
          : { label: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', onPress: handleBlockUser, icon: null, isRowButton: false },
      ]}
    />
    <ReportMenu
    isVisible={isReportMenuVisible}
    onClose={() => setIsReportMenuVisible(false)}
    userId={userId as string}
    />
  </View>
  );
};

export const styles = StyleSheet.create({
  container: {
    backgroundColor: 'rgba(255, 255, 255, 1)',
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 16,
  },
  errorText: {
    color: 'red',
    fontSize: 16,
    textAlign: 'center',
  },
  scrollViewContent: {
    alignItems: 'center',
    width: '100%',
  },
  contentContainer: {
    maxWidth: 600,
    width: '100%',
  },
  headerButtons: {
    position: 'absolute',
    top: 58,
    left: 16,
    right: 16,
    flexDirection: 'row',
    justifyContent: 'space-between', // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    alignItems: 'center', // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ü–µ–Ω—Ç—Ä—É –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
  },
  coverImageContainer: {
    width: '100%',
    aspectRatio: 414 / 210, // –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 414:210 = 1.971:1
  },
  coverImage: {
    width: '100%',
    height: '100%',
    backgroundColor: '#D2D2D2',
    resizeMode: 'cover',  // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  },
  divider: {
    backgroundColor: 'rgba(236, 236, 236, 1)',
    minHeight: 0.5,
    marginTop: 20,
    marginBottom: 20,
    width: '100%',
  },
});

export default UserProfile;
