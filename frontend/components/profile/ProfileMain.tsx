import React, { useEffect, useState } from 'react';
import { IMAGE_URL, UserDataProps, getUserProfile } from '@/api/index'; 
import { getSosSignalById, getSosSignalByUserId } from '@/api/sos/sosApi';
import { View, ScrollView, Image, TouchableOpacity, ActivityIndicator, Text, Modal, Pressable } from 'react-native';
import { router } from 'expo-router';
import ProfileHeader from './ProfileHeader';
import ProfileStats from './ProfileStats';
import Post from './Post';
import BottomNavigation from '../BottomNavigation';
import EditBackgroundImage from './EditBackgroundImage';
import SettingsIcon from '../svgConvertedIcons/SettingsIcon';
import SosIcon from '../svgConvertedIcons/sosIcons/SosIcon';
import QrIcon from '../svgConvertedIcons/qrIcon';
import { styles } from './profileStyle';
import ProfileSosIcon from '../svgConvertedIcons/sosIcons/profileSosIcon';

const ProfileMain: React.FC = () => {
  const [user, setUser] = useState<UserDataProps | null>(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [loading, setLoading] = useState<boolean>(true); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const [error, setError] = useState<string | null>(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–æ–∫
  const [isModalVisible, setModalVisible] = useState(false);
  const [imageKey, setImageKey] = useState(Date.now());
  const [backgroundImage, setBackgroundImage] = useState(user?.backgroundImage);

  const updateUserBackgroundProfile = (updatedBackgroundImage: string) => {
    if (user) {
      setUser({ ...user, backgroundImage: updatedBackgroundImage });
    }
  };

  const handleSave = (newImage: string) => {
    setBackgroundImage(newImage);
    setImageKey(Date.now()); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞
    updateUserBackgroundProfile(newImage); // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    setModalVisible(false);
    console.log('ProfileHeader props:', { backgroundImage, user });
  };  

  useEffect(() => {
    if (user?.backgroundImage) {
      setBackgroundImage(user.backgroundImage);
    }
  }, [user]);
  
  useEffect(() => {
    const fetchUserData = async () => {
      try {
        console.log("–ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è...");
        setLoading(true);
        const userData = await getUserProfile();
        console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:", userData);
  
        let activeSosId = null;
  
        if (userData.id) {
          console.log(`üì° –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π SOS-—Å–∏–≥–Ω–∞–ª –¥–ª—è userId: ${userData.id}`);
          
          // ‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ SOS
          const sosResponse = await getSosSignalByUserId(userData.id);
  
          console.log("üéØ –û—Ç–≤–µ—Ç –æ—Ç getSosSignalByUserId:", sosResponse);
  
          if (sosResponse && sosResponse.status === "active") {
            activeSosId = sosResponse._id;
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π SOS: ${activeSosId}`);
          } else {
            console.warn("‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ SOS-—Å–∏–≥–Ω–∞–ª–∞.");
          }
        }
  
        setUser({
          ...userData,
          sosSignalActive: !!activeSosId,
          sosSignalId: activeSosId,
        });
      } catch (err: any) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err.message);
        setError(err.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
      } finally {
        console.log("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, setLoading(false)");
        setLoading(false);
      }
    };
  
    fetchUserData();
  }, []);
  
  const updateUserProfile = (updatedProfileImage: string) => {
    if (user) {
      setUser({ ...user, profileImage: updatedProfileImage });
    }
  };

  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#000" />
        <Text>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</Text>
      </View>
    );
  }

  // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
  if (error) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>–û—à–∏–±–∫–∞: {error}</Text>
      </View>
    );
  }

  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
  if (!user) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</Text>
      </View>
    );
  }

  const fetchSosSignal = async (sosId: string) => {
    try {
      const response = await getSosSignalById(sosId);
    } catch (error){
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SOS-—Å–∏–≥–Ω–∞–ª–∞:", error)
    } 
  };

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  return (
    <View style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollViewContent}>
        <View style={styles.contentContainer}>
          <View style={styles.headerButtons}>
            <TouchableOpacity
              onPress={() => {
                if (user && user.id) {
                  console.log(`Navigating to: /profileQR/${user.id}`);
                  router.push(`/profileQR/${user.id}`);
                } else {
                  console.error("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
                }
              }}
            >
              <QrIcon width={22} height={22} />
            </TouchableOpacity>
            {user.sosSignalActive ? (
              <Pressable onPress={() => router.push(`/sos-signal/${user.sosSignalId}`)} style={styles.sosActiveContainer}>
                <ProfileSosIcon/>
                <Text style={styles.sosActiveText}>C–∏–≥–Ω–∞–ª SOS –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</Text>
              </Pressable>
            ) : (
              ''
            )}
            <View style={styles.rightIcons}>
              {user.sosSignalActive ? (
                ''
              ) : (
                <TouchableOpacity onPress={() => router.push("/sos")} style={styles.sosIcon}>
                  <SosIcon width={22} height={22} />
                </TouchableOpacity>
              )}
              <TouchableOpacity onPress={() => router.push("/settings")} style={styles.settingIcon}>
                <SettingsIcon width={22} height={22} />
              </TouchableOpacity>
            </View>
          </View>
          <TouchableOpacity onPress={() => setModalVisible(true)}>
            <View style={styles.coverImageContainer}>
            {backgroundImage ? ( 
              <Image
                resizeMode="cover"
                source={{
                  uri: `${IMAGE_URL}${backgroundImage}?key=${imageKey}`,
                  cache: 'reload',
                }}
                style={styles.coverImage}
              />              
              ): (
              <View style={styles.coverImage} />
            )}
            </View>
          </TouchableOpacity>  
          <Modal visible={isModalVisible} animationType="slide">
            <EditBackgroundImage
            backgroundImage={backgroundImage || ''}
            onClose={() => setModalVisible(false)}
            onSave={handleSave}/>
          </Modal>          
          {user && <ProfileHeader user={user} isOwnProfile={true} onUpdateUserProfile={updateUserProfile} />}
          <ProfileStats user={user} />
          <View style={styles.divider} />
          <Post postType="image" />
          <Post postType="video" />
        </View>
      </ScrollView>
      <BottomNavigation />
    </View>
  );
};

export default ProfileMain;
