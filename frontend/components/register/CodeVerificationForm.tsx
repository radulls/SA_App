import React, { forwardRef, useImperativeHandle, useState } from 'react';
import { View, Text } from 'react-native';
import InputField from '../InputField';
import ErrorMessage from '../ErrorMessage';
import { verifyEmailCode, handleError } from '@/api';
import styles from './style';
import { ValueProps } from '@/app/register';

export interface CodeVerificationFormRef {
  validateInput: () => Promise<void>;
}

const CodeVerificationForm = forwardRef<CodeVerificationFormRef, ValueProps>(({ value, email, onDataChange }, ref) => {
  const [error, setError] = useState<string | null>(null);
  const [isCodeChecked, setIsCodeChecked] = useState(false); // –ù–æ–≤—ã–π —Å—Ç–µ–π—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

  const validateInput = async () => {
    setError(null);
  
    if (!value.trim()) {
      setError('–ö–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.');
      return Promise.reject('Validation Error');
    }
  
    if (!email) {
      setError('Email –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
      return Promise.reject('Email –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }
  
    if (isCodeChecked) {
      console.log("‚ö†Ô∏è –ö–æ–¥ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è");
      return;
    }
  
    try {
      console.log("üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /verify-code...");
      const result = await verifyEmailCode(email, value.trim());
      console.log('‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
      setIsCodeChecked(true); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∫–æ–¥ —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
    } catch (err: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:", err);
      setError(handleError(err) || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      return Promise.reject(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  };

  useImperativeHandle(ref, () => ({
    validateInput,
  }));

  const handleInputChange = (code: string) => {
    onDataChange(code.trim());
    setError(null); // –£–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ
  };

  return (
    <View style={styles.form}>
      <Text style={styles.title}>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</Text>
      <Text style={styles.description}>
        –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à—ë–ª –Ω–∞ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É.
      </Text>
      {error && <ErrorMessage message={error} />}
      <View style={styles.inputContainer}>
        <InputField
          label="–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
          onChange={handleInputChange}
          value={value}
        />
      </View>
    </View>
  );
});

export default CodeVerificationForm;
