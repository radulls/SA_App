import React, { useState, useEffect, useRef } from 'react';
import { 
  View, TextInput, Text, TouchableOpacity, FlatList, 
  StyleSheet, Alert, Image, Platform, Animated 
} from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import { getSosTags, createSosSignal, SosTag, getAuthHeaders } from '@/api/sos/sosApi';
import * as FileSystem from 'expo-file-system';
import DeleteIcon from '../svgConvertedIcons/MapIcons/deleteIcon';
import PlusIcon from '../svgConvertedIcons/MapIcons/plusIcon';
import SosStartButtonIcon from '../svgConvertedIcons/MapIcons/sosStartButton';
import Toast from 'react-native-toast-message';  // üöÄ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Toast
import { useRouter } from 'expo-router';

interface DetailsData {
  title: string;
  tags: string[];
  description: string;
  photos: string[];
}

interface LocationData {
  latitude: number;
  longitude: number;
  address: string;
}

interface Props {
  onNext: (sosId: string) => void; // ‚úÖ –¢–µ–ø–µ—Ä—å onNext –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ sosId
  location: LocationData;
  initialData?: DetailsData; 
  goBackToMap: () => void; 
}

const DetailsStep: React.FC<Props> = ({ onNext, location, initialData, goBackToMap }) => {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [tags, setTags] = useState<string[]>([]);
  const [availableTags, setAvailableTags] = useState<string[]>([]);
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [userId, setUserId] = useState<string | null>(null);
  const [photos, setPhotos] = useState<string[]>([]);
  const [pressTimer, setPressTimer] = useState<NodeJS.Timeout | null>(null);

   // üî• –ê–Ω–∏–º–∞—Ü–∏–∏
   const scaleAnim = useRef(new Animated.Value(1)).current; // –†–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
   const shakeAnim = useRef(new Animated.Value(0)).current; // –¢—Ä—è—Å–∫–∞ –∫–Ω–æ–ø–∫–∏

  useEffect(() => {
    loadTags();
    requestPermissions();
  
    (async () => {
      try {
        const headers = await getAuthHeaders(); // ‚úÖ –¢–ï–ü–ï–†–¨ `headers` —Å–æ–¥–µ—Ä–∂–∏—Ç `userId`
        console.log("‚úÖ userId –ø–æ–ª—É—á–µ–Ω:", headers.userId);
        setUserId(headers.userId);
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è userId:", err);
      }
    })();
  }, []);
  
  // üìå –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≥–∞–ª–µ—Ä–µ–µ
  const requestPermissions = async () => {
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== 'granted') {
      Alert.alert("–û—à–∏–±–∫–∞", "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –Ω—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≥–∞–ª–µ—Ä–µ–µ.");
    }
  };

  // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ —Å –±—ç–∫–µ–Ω–¥–∞
  const loadTags = async () => {
    try {
      const data: SosTag[] = await getSosTags();
      setAvailableTags(data.map((tag: SosTag) => tag.name));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤:', error);
    }
  };

  // üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞
  const toggleTag = (tag: string) => {
    setTags(prevTags =>
      prevTags.includes(tag) ? prevTags.filter(t => t !== tag) : [...prevTags, tag]
    );
  };

  // üìå –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ
  const pickImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync();

    if (!result.canceled) {
      const fileUri = result.assets[0].uri;

      if (Platform.OS === 'web') {
        // ‚úÖ –ù–∞ –≤–µ–±–µ `copyAsync` –ù–ï –†–ê–ë–û–¢–ê–ï–¢, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º `fileUri`
        setPhotos([...photos, fileUri]);
      } else {
        // ‚úÖ –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∫–æ–ø–∏—Ä—É–µ–º –≤ `cacheDirectory`
        const newUri = `${FileSystem.cacheDirectory}${fileUri.split('/').pop()}`;
        await FileSystem.copyAsync({ from: fileUri, to: newUri });
        setPhotos([...photos, newUri]);
      }
    }
  };

  // üìå –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ
  const removePhoto = (index: number) => {
    setPhotos(prevPhotos => prevPhotos.filter((_, i) => i !== index));
  };

  // üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ObjectId —Ç–µ–≥–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
  const getTagIds = async () => {
    const allTags = await getSosTags();
    return tags.map(tag => {
      const foundTag = allTags.find(t => t.name === tag);
      return foundTag ? foundTag._id : null;
    }).filter(id => id !== null);
  };

  // üìå –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const handleSubmit = async () => {
    console.log("üü¢ handleSubmit() –≤—ã–∑–≤–∞–Ω");
  
    if (!userId) {
      Toast.show({
        type: 'error',
        text1: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
        position: 'bottom',
      });
      return;
    }
  
    if (!location.address || !title.trim()) {
      Toast.show({
        type: 'error',
        text1: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.',
        position: 'bottom',
      });
      return;
    }
  
    if (tags.length === 0) {
      Toast.show({
        type: 'error',
        text1: '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥.',
        position: 'bottom',
      });
      return;
    }
  
    try {
      const tagIds = await getTagIds();
      console.log("‚úÖ –¢–µ–≥–∏ —Å–æ–±—Ä–∞–Ω—ã:", tagIds);
  
      const formData = new FormData();
      formData.append('userId', userId);
      formData.append('title', title);
      formData.append('description', description.trim() ? description : "");
      formData.append('location[latitude]', location.latitude.toString());
      formData.append('location[longitude]', location.longitude.toString());
      formData.append('location[address]', location.address);
      
      tagIds.forEach(tag => {
        if (tag) {
          formData.append('tags[]', tag);
        }
      });
  
      console.log("üì§ –ì–æ—Ç–æ–≤–∏–º —Ñ–∞–π–ª—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ...");
      for (const [index, uri] of photos.entries()) {
        const fileName = uri.split('/').pop();
        const fileType = fileName?.split('.').pop()?.toLowerCase() || 'jpeg';
  
        if (Platform.OS === 'web') {
          const response = await fetch(uri);
          const blob = await response.blob();
          const extension = blob.type.split("/")[1] || "jpeg";
          const correctFileName = `photo-${index}.${extension}`;
          const file = new File([blob], correctFileName, { type: blob.type });
  
          console.log("üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª:", file.name, file.type);
          formData.append("photos", file);
        } else {
          formData.append('photos', {
            uri,
            type: `image/${fileType}`,
            name: `photo-${index}.${fileType}`,
          } as any);
        }
      }
  
      console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º FormData:", formData);
  
      const response = await createSosSignal(formData);
      console.log("‚úÖ SOS-—Å–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω:", response.data);
  
      Toast.show({
        type: 'success',
        text1: 'SOS-—Å–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω.',
        position: 'bottom',
      });
  
      const newSosId = response.data.sos._id; // üî• –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
      console.log("üöÄ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É SOS:", newSosId);
  
      console.log("üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç:", `/sos-signal/${newSosId}`);
      router.push(`/sos-signal/${newSosId}`);
      
    } catch (error) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SOS-—Å–∏–≥–Ω–∞–ª–∞:", error);
      Toast.show({
        type: 'error',
        text1: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SOS-—Å–∏–≥–Ω–∞–ª.',
        position: 'bottom',
      });
    }
  };  
  
  const handlePressIn = () => {
    if (!location.address || !title.trim()) {
      Toast.show({
        type: 'error',
        text1: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.',
        position: 'bottom',
      });
      return;
    }
  
    if (Platform.OS === 'web') {
      // ‚úÖ –ù–∞ –≤–µ–±–µ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
      handleSubmit();
    } else {
      // ‚úÖ –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∂–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      const timer = setTimeout(() => {
        Animated.timing(scaleAnim, {
          toValue: 1.2,
          duration: 300,
          useNativeDriver: true,
        }).start(() => {
          Animated.timing(scaleAnim, {
            toValue: 1,
            duration: 200,
            useNativeDriver: true,
          }).start();
  
          Toast.show({
            type: 'success',
            text1: 'SOS-—Å–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω!',
            position: 'bottom',
          });
  
          handleSubmit();
        });
      }, 2000); // ‚è≥ –ñ–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã
  
      setPressTimer(timer);
  
      // –ê–Ω–∏–º–∞—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∏—è
      Animated.timing(scaleAnim, {
        toValue: 0.8,
        duration: 2000,
        useNativeDriver: true,
      }).start();
    }
  };
  
  const handlePressOut = () => {
    if (Platform.OS !== 'web' && pressTimer) {
      clearTimeout(pressTimer); // ‚ùå –û—Ç–º–µ–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—É—Å—Ç–∏–ª –∫–Ω–æ–ø–∫—É —Ä–∞–Ω—å—à–µ
      setPressTimer(null);
    }
  
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    Animated.timing(scaleAnim, {
      toValue: 1,
      duration: 200,
      useNativeDriver: true,
    }).start();
  };
  
  return (
    <View style={styles.container}>
      <Text style={styles.label}>–õ–æ–∫–∞—Ü–∏—è:</Text>
      <TouchableOpacity onPress={goBackToMap} style={styles.adressContainer}>
        <Text style={styles.address}>{location.address}</Text>
      </TouchableOpacity>
      <Text style={styles.label}>–ì–æ—Ç–æ–≤—ã–µ —Ç–µ–≥–∏</Text>
      <FlatList
        style={styles.tagContainer} 
        data={availableTags}
        keyExtractor={(item) => item}
        contentContainerStyle={{ flexDirection: 'row', flexWrap: 'wrap' }}
        renderItem={({ item }) => (
          <TouchableOpacity
            style={[styles.tagButton, tags.includes(item) && styles.selectedTag]}
            onPress={() => toggleTag(item)}
          >
            <Text style={[styles.tagText, tags.includes(item) && styles.selectedTagText]}>{item}</Text>
          </TouchableOpacity>
        )}
      />
      <Text style={styles.label}>–ó–∞–≥–æ–ª–æ–≤–æ–∫</Text>
      <TextInput value={title} onChangeText={setTitle} style={styles.input} />

      <Text style={styles.label}>–î–µ—Ç–∞–ª–∏</Text>
      <TextInput       
        value={description}
        onChangeText={setDescription}
        multiline
        style={[styles.input, styles.description]} 
      />
      <View style={styles.photoContainer}>
        <TouchableOpacity style={styles.photoButton} onPress={pickImage}>
          <View style={styles.plusButton}>
            <PlusIcon/>
          </View>    
        </TouchableOpacity>
        <FlatList
          horizontal
          data={photos}
          keyExtractor={(item, index) => index.toString()}
          renderItem={({ item, index }) => (
            <View style={styles.imageContainer}>
              <Image source={{ uri: item }} style={styles.image} />
              <TouchableOpacity onPress={() => removePhoto(index)} style={styles.removePhoto}>
                <DeleteIcon/>
              </TouchableOpacity>
            </View>
          )}
        />      
      </View>
      <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>
        <TouchableOpacity
          activeOpacity={1}
          onPressIn={handlePressIn} 
          onPressOut={handlePressOut} 
          style={styles.startButton}
        >
          <SosStartButtonIcon />
        </TouchableOpacity>
      </Animated.View>
      <Text style={styles.buttonText}>–î–ª—è –∑–∞–ø—É—Å–∫–∞ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É</Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 20,
  },
  label: {
    fontSize: 14,
    fontWeight: '700',
    paddingVertical: 10,
  },
  input: {
    fontSize: 14,
    fontWeight: '400',
    height: 43,
    paddingHorizontal: 15,
    borderRadius: 12,
    marginBottom: 10,
    backgroundColor: '#F3F3F3',
  },
  adressContainer: {
    justifyContent: 'center',
    height: 43,
    paddingHorizontal: 15,
    borderRadius: 12,
    marginBottom: 10,
    backgroundColor: '#F3F3F3',
  },
  address: {
    fontSize: 14,
    fontWeight: '400',
  },
  tagContainer: {
    paddingBottom: 20,
  },
  tagButton: {
    backgroundColor: '#E8E8E8',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
    margin: 5,
    alignItems: 'center',
    flex: 1,
  },
  selectedTag: {
    backgroundColor: '#F22C2C',
  },
  tagText: {
    fontSize: 12,
    fontWeight: '700',
    color: '#000',
  },
  selectedTagText: {
    color: '#fff',
  },
  description: {
    height: 100,
    paddingVertical: 18,
  },
  photoContainer:{
    flexDirection: 'row',
    gap: 10,
  },
  imageContainer: {
    position: 'relative',
    marginRight: 10,
  },
  image: {
    width: 112,
    height: 112,
    borderRadius: 12,
  },
  removePhoto: {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: [{ translateX: -11 }, { translateY: -11 }], 
},
  photoButton:{
    width: 112,
    height: 112,
    borderRadius: 12,
    backgroundColor: '#F3F3F3',
    position: 'relative'
  },
  plusButton:{
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: [{ translateX: -7 }, { translateY: -7 }], 
  },
  startButton:{
    alignItems: 'center',
    marginTop: 30,
    marginBottom: 18
  },
  buttonText:{
    fontWeight: '500',
    fontSize: 12,
    textAlign: 'center'
  }
});

export default DetailsStep;