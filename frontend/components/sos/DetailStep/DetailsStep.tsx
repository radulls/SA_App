import React, { useState, useEffect, useRef } from 'react';
import { 
  View, Text, TouchableOpacity,
  StyleSheet, Alert, Platform, Animated 
} from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import { getSosTags, createSosSignal, SosTag, getAuthHeaders, updateSosSignal } from '@/api/sos/sosApi';
import SosStartButtonIcon from '../../svgConvertedIcons/MapIcons/sosStartButton';
import Toast from 'react-native-toast-message';  // üöÄ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Toast
import { useRouter } from 'expo-router';
import PhotoUploader from './PhotoUploader';
import SosForm from './SosForm';

interface DetailsData {
  title: string;
  tags: string[];
  description: string;
  photos: string[];
}

interface LocationData {
  latitude: number;
  longitude: number;
  address: string;
}

interface Props {
  onNext: (sosId: string) => void; // ‚úÖ –¢–µ–ø–µ—Ä—å onNext –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ sosId
  location: LocationData;
  initialData?: DetailsData; 
  goBackToMap: () => void; 
  sosId?: string; // –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  isEditing?: boolean; // üî• –§–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
}

const DetailsStep: React.FC<Props> = ({ onNext, location, initialData, goBackToMap, sosId, isEditing }) => {
  const [title, setTitle] = useState(initialData?.title || '');
  const [description, setDescription] = useState(initialData?.description || '');
  const [tags, setTags] = useState<string[]>(initialData?.tags || []);
  const [photos, setPhotos] = useState<string[]>(initialData?.photos || []);
  const [availableTags, setAvailableTags] = useState<string[]>([]);
  const router = useRouter();
  const [userId, setUserId] = useState<string | null>(null);
  const [pressTimer, setPressTimer] = useState<NodeJS.Timeout | null>(null);

   // üî• –ê–Ω–∏–º–∞—Ü–∏–∏
   const scaleAnim = useRef(new Animated.Value(1)).current; // –†–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
   const shakeAnim = useRef(new Animated.Value(0)).current; // –¢—Ä—è—Å–∫–∞ –∫–Ω–æ–ø–∫–∏

  useEffect(() => {
    loadTags();
    requestPermissions();
    (async () => {
      try {
        const headers = await getAuthHeaders(); // ‚úÖ –¢–ï–ü–ï–†–¨ `headers` —Å–æ–¥–µ—Ä–∂–∏—Ç `userId`
        console.log("‚úÖ userId –ø–æ–ª—É—á–µ–Ω:", headers.userId);
        setUserId(headers.userId);
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è userId:", err);
      }
    })();
  }, []);
  
  // üìå –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≥–∞–ª–µ—Ä–µ–µ
  const requestPermissions = async () => {
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== 'granted') {
      Alert.alert("–û—à–∏–±–∫–∞", "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –Ω—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≥–∞–ª–µ—Ä–µ–µ.");
    }
  };

  // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ —Å –±—ç–∫–µ–Ω–¥–∞
  const loadTags = async () => {
    try {
      const data: SosTag[] = await getSosTags();
      setAvailableTags(data.map((tag: SosTag) => tag.name));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–≥–æ–≤:', error);
    }
  };

  // üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ObjectId —Ç–µ–≥–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
  const getTagIds = async () => {
    const allTags = await getSosTags();
    return tags.map(tag => {
      const foundTag = allTags.find(t => t.name === tag);
      return foundTag ? foundTag._id : null;
    }).filter(id => id !== null);
  };

  // üìå –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const handleSubmit = async () => {
    console.log("üü¢ handleSubmit() –≤—ã–∑–≤–∞–Ω");
    if (!userId) {
      Toast.show({ type: 'error', text1: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.', position: 'bottom' });
      return;
    }
    if (!location.address || !title.trim()) {
      Toast.show({ type: 'error', text1: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.', position: 'bottom' });
      return;
    }
    if (tags.length === 0) {
      Toast.show({ type: 'error', text1: '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥.', position: 'bottom' });
      return;
    }
    try {
      const tagIds = (await getTagIds()).filter((tag): tag is string => tag !== null);
      const formData = new FormData();
      formData.append('userId', userId);
      formData.append('title', title);
      formData.append('description', description.trim() ? description : "");
      formData.append('location[latitude]', location.latitude.toString());
      formData.append('location[longitude]', location.longitude.toString());
      formData.append('location[address]', location.address);
      tagIds.forEach(tag => formData.append('tags[]', tag));
      console.log("üì§ –ì–æ—Ç–æ–≤–∏–º —Ñ–∞–π–ª—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ...");
      // **–§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ**
      const existingPhotos: string[] = photos.filter(uri => {
        return uri.startsWith('http') || uri.startsWith('/uploads/') || uri.startsWith('uploads/');
      });
      const newPhotos = photos.filter(uri => {
        return !uri.startsWith('http') && !uri.startsWith('/uploads/') && !uri.startsWith('uploads/');
      });
      console.log("üì∏ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ:", existingPhotos);
      console.log("üì∏ –ù–æ–≤—ã–µ —Ñ–æ—Ç–æ:", newPhotos);
      if (existingPhotos.length > 0) {
        formData.append('existingPhotos', JSON.stringify(existingPhotos));
      }
      for (const [index, uri] of newPhotos.entries()) {
        const fileName = uri.split('/').pop();
        let fileType = fileName?.split('.').pop()?.toLowerCase() || 'jpeg';
        if (!['jpg', 'jpeg', 'png'].includes(fileType)) {
          fileType = 'jpeg';
        }
        if (Platform.OS === 'web') {
          const response = await fetch(uri);
          const blob = await response.blob();
          const extension = blob.type.split("/")[1] || "jpeg";
          const correctFileName = `photo-${index}.${extension}`;
          const file = new File([blob], correctFileName, { type: blob.type });
          console.log("üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª:", file.name, file.type);
          formData.append("photos", file);
        } else {
          formData.append('photos', {
            uri,
            type: `image/${fileType}`,
            name: `photo-${index}.${fileType}`,
          } as any);
        }
      }
      console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º FormData:", formData);
      let response;
      if (isEditing && sosId) {
        console.log("üì§ –û–±–Ω–æ–≤–ª—è–µ–º SOS-—Å–∏–≥–Ω–∞–ª...");
        response = await updateSosSignal(sosId, formData);
        console.log("‚úÖ SOS-—Å–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω:", response.data);
      } else {
        console.log("üì§ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π SOS-—Å–∏–≥–Ω–∞–ª...");
        response = await createSosSignal(formData);
        console.log("‚úÖ SOS-—Å–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω:", response.data);
      }
      Toast.show({ type: 'success', text1: isEditing ? 'SOS-—Å–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω.' : 'SOS-—Å–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω.', position: 'bottom' });
      const newSosId = response.data.sos._id;
      console.log("üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç:", `/sos-signal/${newSosId}`);
      router.push(`/sos-signal/${newSosId}`);
    } catch (error) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SOS-—Å–∏–≥–Ω–∞–ª–∞:", error);
      Toast.show({ type: 'error', text1: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SOS-—Å–∏–≥–Ω–∞–ª.', position: 'bottom' });
    }
  };
  
  const handlePressIn = () => {
    if (!location.address || !title.trim()) {
      Toast.show({
        type: 'error',
        text1: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.',
        position: 'bottom',
      });
      return;
    }
    if (Platform.OS === 'web') {
      // ‚úÖ –ù–∞ –≤–µ–±–µ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
      handleSubmit();
    } else {
      // ‚úÖ –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∂–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      const timer = setTimeout(() => {
        Animated.timing(scaleAnim, {
          toValue: 1.2,
          duration: 300,
          useNativeDriver: true,
        }).start(() => {
          Animated.timing(scaleAnim, {
            toValue: 1,
            duration: 200,
            useNativeDriver: true,
          }).start();
  
          Toast.show({
            type: 'success',
            text1: 'SOS-—Å–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω!',
            position: 'bottom',
          });
          handleSubmit();
        });
      }, 2000); // ‚è≥ –ñ–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã
      setPressTimer(timer);
      // –ê–Ω–∏–º–∞—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∏—è
      Animated.timing(scaleAnim, {
        toValue: 0.8,
        duration: 2000,
        useNativeDriver: true,
      }).start();
    }
  };
  
  const handlePressOut = () => {
    if (Platform.OS !== 'web' && pressTimer) {
      clearTimeout(pressTimer); // ‚ùå –û—Ç–º–µ–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—É—Å—Ç–∏–ª –∫–Ω–æ–ø–∫—É —Ä–∞–Ω—å—à–µ
      setPressTimer(null);
    }
  
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    Animated.timing(scaleAnim, {
      toValue: 1,
      duration: 200,
      useNativeDriver: true,
    }).start();
  };
  
  return (
    <View style={styles.container}>
      <SosForm
        location={location}
        goBackToMap={goBackToMap}
        title={title}
        setTitle={setTitle}
        description={description}
        setDescription={setDescription}
        tags={tags}
        setTags={setTags}
        availableTags={availableTags}
      />
      <PhotoUploader photos={photos} setPhotos={setPhotos} />
      <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>
        <TouchableOpacity
          activeOpacity={1}
          onPressIn={handlePressIn} 
          onPressOut={handlePressOut} 
          style={styles.startButton}
        >
          <SosStartButtonIcon />
        </TouchableOpacity>
      </Animated.View>
      <Text style={styles.buttonText}>–î–ª—è –∑–∞–ø—É—Å–∫–∞ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É</Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    paddingHorizontal: 16,
    paddingBottom: 16,
    paddingTop: 15,
  },
  startButton:{
    alignItems: 'center',
    marginTop: 30,
    marginBottom: 14,
  },
  buttonText:{
    fontFamily: "SFUIDisplay-medium",
    fontSize: 14,
    textAlign: 'center',
    color: '#000',
  }
});

export default DetailsStep;