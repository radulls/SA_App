import React, { useState, useEffect } from 'react';
import { View, TouchableOpacity, Text, StyleSheet, Modal, ActivityIndicator } from 'react-native';
import * as Location from 'expo-location';
import GeoIcon from '@/components/svgConvertedIcons/MapIcons/geoIcon';
import AddressSearch from '../AddressSearch';
import SearchIcon from '@/components/svgConvertedIcons/BottomMenuIcons/SearchIcon';
import { fetchAddressFromCoordinates } from '@/utils/locationUtils';
import ExpoMapComponent from './ExpoMapComponent';
import * as FileSystem from 'expo-file-system';
import { Asset } from 'expo-asset';
import { styles } from '../mapStyle'

interface Coordinates {
  latitude: number;
  longitude: number;
}

interface MapExpoProps {
  onNext: (location: Coordinates | string) => void;
}

const MapExpo: React.FC<MapExpoProps> = ({ onNext }) => {
  const [address, setAddress] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedLocation, setSelectedLocation] = useState<Coordinates | null>(null);
  const [loading, setLoading] = useState(true);
  const [iconBase64, setIconBase64] = useState<string>('');

  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        console.error('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
        setLoading(false);
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      const { latitude, longitude } = location.coords;
      setSelectedLocation({ latitude, longitude });
      fetchAddressFromCoordinates(latitude, longitude, setAddress);
      setLoading(false);
    })();
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≤ base64
  useEffect(() => {
    (async () => {
      try {
        // üìå –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –±–µ–∑ alias
        const asset = Asset.fromModule(require('../../../../assets/geotagIcom.png'));
  
        // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        await asset.downloadAsync();
  
        // üìå –ß–∏—Ç–∞–µ–º –∫–∞–∫ base64
        const base64 = await FileSystem.readAsStringAsync(asset.localUri || '', {
          encoding: FileSystem.EncodingType.Base64,
        });
  
        setIconBase64(`data:image/png;base64,${base64}`);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      }
    })();
  }, []);
  
  const selectAddress = (item: { label: string; latitude: number; longitude: number }) => {
    setAddress(item.label);
    setSelectedLocation({ latitude: item.latitude, longitude: item.longitude });
    setIsModalOpen(false);
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#000" />
      </View>
    );
  }

  return (
    <View style={styles.block}>
      <View style={styles.container}>
        {/* OSM —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –º–∞—Ä–∫–µ—Ä–æ–º */}
        <ExpoMapComponent 
          onLocationSelect={(loc) => {
            setSelectedLocation(loc);
            fetchAddressFromCoordinates(loc.latitude, loc.longitude, setAddress);
          }}
          iconBase64={iconBase64}
          selectedLocation={selectedLocation} // –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –ø—Ä–æ–ø—Å, –Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        />
        {/* –ö–Ω–æ–ø–∫–∞ "–ú–æ—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è" */}
        <TouchableOpacity
          style={styles.geoButton}
          onPress={async () => {
            let location = await Location.getCurrentPositionAsync({});
            const { latitude, longitude } = location.coords;
            setSelectedLocation({ latitude, longitude });
            fetchAddressFromCoordinates(latitude, longitude, setAddress);
          }}
        >
          <GeoIcon />
        </TouchableOpacity>
        <View style={styles.bottomContainer}>
          <Text style={styles.title}>–õ–æ–∫–∞—Ü–∏—è</Text>
          {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
          <TouchableOpacity style={styles.inputContainer} onPress={() => setIsModalOpen(true)}>
            <SearchIcon />
            <Text key={address} style={styles.inputText}>{address || '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å...'}</Text>
          </TouchableOpacity>

          {/* –ö–Ω–æ–ø–∫–∞ "–í—Å—ë –≤–µ—Ä–Ω–æ" */}
          <TouchableOpacity style={styles.button} onPress={() => onNext(selectedLocation || address)}>
            <Text style={styles.buttonText}>–í—Å—ë –≤–µ—Ä–Ω–æ</Text>
          </TouchableOpacity>
        </View>
        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å `AddressSearch` */}
        <Modal visible={isModalOpen} animationType="slide">
          <View style={styles.modalOpen}>
            <View style={styles.modalContainer}>
              <AddressSearch onSelectAddress={selectAddress} initialAddress={address}/>
              <TouchableOpacity style={styles.button} onPress={() => setIsModalOpen(false)}>
                <Text style={styles.buttonText}>–ó–∞–∫—Ä—ã—Ç—å</Text>
              </TouchableOpacity>
            </View>
          </View>
        </Modal>
      </View>
    </View>
  );
};

export default MapExpo;
