import React, { useState, Suspense, lazy, useEffect } from 'react';
import { View, TouchableOpacity, Text, StyleSheet, Modal, ActivityIndicator } from 'react-native';
import GeoIcon from '@/components/svgConvertedIcons/MapIcons/geoIcon';
import AddressSearch from '../AddressSearch'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
import SearchIcon from '@/components/svgConvertedIcons/BottomMenuIcons/SearchIcon';
import { fixAddressOrder, fetchAddressFromCoordinates } from '@/utils/locationUtils';
import { styles } from '../mapStyle'

const MapComponent = lazy(() => import('./MapComponent'));

interface Coordinates {
  latitude: number;
  longitude: number;
}

interface MapWebProps {
  onNext: (location: Coordinates | string) => void;
}

const MapWeb: React.FC<MapWebProps> = ({ onNext }) => {
  const [address, setAddress] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedLocation, setSelectedLocation] = useState<Coordinates | null>(null);
  
  useEffect(() => {
    console.log('üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ address –æ–±–Ω–æ–≤–∏–ª–æ—Å—å:', address);
  }, [address]);
  
  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
  const selectAddress = (item: { label: string; latitude: number; longitude: number }) => {
    console.log('üìå –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:', item.label);
  
    // –ë–µ—Ä—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ label
    const addressParts = item.label.split(', ').map((part) => part.trim());
    const locality = addressParts.find((part) => part.match(/^[–ê-–Ø–Å–∞-—è—ë-]+$/)); // –ì–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–æ–º
  
    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≥–æ—Ä–æ–¥, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫
    const fixedLabel = locality ? fixAddressOrder(item.label, locality) : item.label;
  
    console.log('üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤ selectAddress:', fixedLabel);
    setAddress(fixedLabel);
    setSelectedLocation({ latitude: item.latitude, longitude: item.longitude });
    setIsModalOpen(false);
  };
  
  return (
    <View style={styles.block}>
      <View style={styles.container}>
        {/* –ö–∞—Ä—Ç–∞ */}
        <Suspense fallback={<ActivityIndicator size="large" color="#000" />}>
          <MapComponent 
            selectedLocation={selectedLocation} 
            setSelectedLocation={setSelectedLocation} 
            setAddress={setAddress} 
          />
        </Suspense>
        {/* –ö–Ω–æ–ø–∫–∞ "–ú–æ—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è" */}
        <TouchableOpacity
          style={styles.geoButton}
          onPress={() => {
            console.log('üìç –ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∞!');
            navigator.geolocation.getCurrentPosition(
              (position) => {
                const { latitude, longitude } = position.coords;
                console.log('üì° –ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è:', latitude, longitude);
                setSelectedLocation({ latitude, longitude });

                fetchAddressFromCoordinates(latitude, longitude, setAddress);
              },
              (error) => console.error('‚ö† –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error),
              { enableHighAccuracy: true }
            );
          }}
        >
          <GeoIcon />
        </TouchableOpacity>
        <View style={styles.bottomContainer}>
          <Text style={styles.title}>–õ–æ–∫–∞—Ü–∏—è</Text>
          {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ) */}
          <TouchableOpacity style={styles.inputContainer} onPress={() => setIsModalOpen(true)}>
            <SearchIcon/>
            <Text key={address} style={styles.inputText}>{address || '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å...'}</Text>
          </TouchableOpacity>
          {/* –ö–Ω–æ–ø–∫–∞ "–í—Å—ë –≤–µ—Ä–Ω–æ" */}
          <TouchableOpacity style={styles.button} onPress={() => onNext(selectedLocation || address)}>
            <Text style={styles.buttonText}>–í—Å—ë –≤–µ—Ä–Ω–æ</Text>
          </TouchableOpacity>
        </View>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å `AddressSearch` */}
        <Modal visible={isModalOpen} animationType="slide">
          <View style={styles.modalOpen}>
            <View style={styles.modalContainer}>
              <AddressSearch onSelectAddress={selectAddress} initialAddress={address}/>
              <TouchableOpacity style={styles.button} onPress={() => setIsModalOpen(false)}>
                <Text style={styles.buttonText}>–ó–∞–∫—Ä—ã—Ç—å</Text>
              </TouchableOpacity>
            </View>
          </View>
        </Modal>
      </View>
    </View>
  );
};

export default MapWeb;
