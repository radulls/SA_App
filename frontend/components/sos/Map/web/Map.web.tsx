import React, { useState, Suspense, lazy, useEffect } from 'react';
import { View, TouchableOpacity, Text, Modal, ActivityIndicator } from 'react-native';
import GeoIcon from '@/components/svgConvertedIcons/MapIcons/geoIcon';
import AddressSearch from '../AddressSearch';
import SearchIcon from '@/components/svgConvertedIcons/BottomMenuIcons/SearchIcon';
import { fetchAddressFromCoordinates } from '@/utils/locationUtils';
import { styles } from '../mapStyle';
import IconBack from '@/components/svgConvertedIcons/iconBack';

const MapComponent = lazy(() => import('./MapComponent'));

interface Coordinates {
  latitude: number;
  longitude: number;
  address?: string;
}

interface MapWebProps {
  onNext: (location: Coordinates | string) => void;
  selectedLocation?: Coordinates | null; // ‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
}

const MapWeb: React.FC<MapWebProps> = ({ onNext, selectedLocation }) => {
  const [address, setAddress] = useState(selectedLocation?.address || '');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentLocation, setCurrentLocation] = useState<Coordinates | null>(selectedLocation || null);
  
  useEffect(() => {
    if (!selectedLocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setCurrentLocation({ latitude, longitude });
          fetchAddressFromCoordinates(latitude, longitude, setAddress);
        },
        (error) => console.error('‚ö† –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error),
        { enableHighAccuracy: true }
      );
    }
  }, [selectedLocation]);

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
  const selectAddress = (item: { label: string; latitude: number; longitude: number }) => {
    setAddress(item.label);
    setCurrentLocation({ latitude: item.latitude, longitude: item.longitude });
    setIsModalOpen(false);
  };
  
  return (
    <View style={styles.block}>
      <View style={styles.container}>
        {/* –ö–∞—Ä—Ç–∞ */}
        <Suspense fallback={<ActivityIndicator size="large" color="#000" />}>
          <MapComponent 
            selectedLocation={currentLocation} 
            setSelectedLocation={setCurrentLocation} 
            setAddress={setAddress} 
          />
        </Suspense>
        <View style={styles.bottomContent}>
          <View style={styles.bottomContentContainer}>
            {/* –ö–Ω–æ–ø–∫–∞ "–ú–æ—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è" */}
            <TouchableOpacity
            style={styles.geoButton}
            onPress={() => {
              navigator.geolocation.getCurrentPosition(
                (position) => {
                  const { latitude, longitude } = position.coords;
                  setCurrentLocation({ latitude, longitude });
                  fetchAddressFromCoordinates(latitude, longitude, setAddress);
                },
                (error) => console.error('‚ö† –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error),
                { enableHighAccuracy: true }
              );
            }}
          >
            <GeoIcon />
            </TouchableOpacity>
            <View style={styles.bottomContainer}>
              <Text style={styles.title}>–õ–æ–∫–∞—Ü–∏—è</Text>
              <TouchableOpacity style={styles.inputContainer} onPress={() => setIsModalOpen(true)}>
                <SearchIcon/>
                <Text style={styles.inputText}>{address || '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å...'}</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.button}
                onPress={() => {
                  if (currentLocation && address) {
                    onNext({
                      latitude: currentLocation.latitude,
                      longitude: currentLocation.longitude,
                      address,
                    });
                  } else {
                    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å.");
                  }
                }}
              >
                <Text style={styles.buttonText}>–í—Å—ë –≤–µ—Ä–Ω–æ</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å `AddressSearch` */}
        <Modal visible={isModalOpen} animationType="slide">
          <View style={styles.modalOpen}>
            <View style={styles.modalContainer}>
              <View style={styles.modalTopContainer}>
                <IconBack onPress={() => setIsModalOpen(false)} fill='#000'/>
                <Text style={styles.modalTitle}>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å</Text>
                <TouchableOpacity onPress={() => setIsModalOpen(false)}>
                  <Text style={styles.addButton}>–ì–æ—Ç–æ–≤–æ</Text>
                </TouchableOpacity>
              </View>
              <AddressSearch 
                key={address} // üî• –§–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞
                onSelectAddress={selectAddress} 
                initialAddress={address} 
              />
            </View>
          </View>
        </Modal>
      </View>
    </View>
  );
};

export default MapWeb;
