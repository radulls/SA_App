import React, { useState, Suspense, lazy } from 'react';
import { View, TouchableOpacity, Text, StyleSheet, Modal, ActivityIndicator } from 'react-native';
import GeoIcon from '@/components/svgConvertedIcons/MapIcons/geoIcon';
import AddressSearch from './AddressSearch'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
import SearchIcon from '@/components/svgConvertedIcons/BottomMenuIcons/SearchIcon';

const MapComponent = lazy(() => import('./MapComponent'));

interface Coordinates {
  latitude: number;
  longitude: number;
}

interface MapWebProps {
  onNext: (location: Coordinates | string) => void;
}

const MapWeb: React.FC<MapWebProps> = ({ onNext }) => {
  const [address, setAddress] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedLocation, setSelectedLocation] = useState<Coordinates | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
  const fetchAddressFromCoordinates = async (lat: number, lon: number) => {
    try {
      const response = await fetch(
        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}&addressdetails=1&extratags=1`
      );
      const data = await response.json();
  
      // üî• –õ–û–ì–ò–†–£–ï–ú –í–ï–°–¨ –û–¢–í–ï–¢ –û–¢ NOMINATIM
      console.log('üõ∞Ô∏è –û–¢–í–ï–¢ –û–¢ NOMINATIM:', data);
  
      if (data.address) {
        console.log('üìå –†–ê–ó–û–ë–†–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï:', data.address);
  
        const {
          road, // –£–ª–∏—Ü–∞
          house_number, // –î–æ–º
          suburb,
          village,
          town,
          city_district,
          city,
          county,
          state,
          country,
          amenity,
        } = data.address;
  
        // üî• –õ–û–ì–ò–†–£–ï–ú –ö–ê–ñ–î–û–ï –ü–û–õ–ï
        console.log('üèô –ì–æ—Ä–æ–¥:', city || town || village || suburb || city_district || county || state);
        console.log('üõ§ –£–ª–∏—Ü–∞:', road);
        console.log('üè† –î–æ–º:', house_number);
  
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ (–Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç)
        const locality = city || town || village || suburb || city_district || county || state || '';
  
        // **–ñ–Å–°–¢–ö–ê–Ø –∑–∞–º–µ–Ω–∞ –ø–æ—Ä—è–¥–∫–∞: "–ì–æ—Ä–æ–¥, –£–ª–∏—Ü–∞, –î–æ–º"**
        let formattedAddress = `${locality}${road ? ', ' + road : ''}${house_number ? ' ' + house_number : ''}`;
  
        // –ï—Å–ª–∏ –Ω–µ—Ç —É–ª–∏—Ü—ã –∏ –¥–æ–º–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥
        if (!road && !house_number) {
          formattedAddress = locality;
        }
  
        // –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º display_name (fallback)
        if (!formattedAddress) {
          formattedAddress = data.display_name;
        }
  
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (amenity) {
          formattedAddress = `${amenity}, ${formattedAddress}`;
        }
  
        console.log('‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –∞–¥—Ä–µ—Å:', formattedAddress);
        setAddress(formattedAddress);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
    }
  };
  
  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
  const selectAddress = (item: { label: string; latitude: number; longitude: number }) => {
    setAddress(item.label);
    setSelectedLocation({ latitude: item.latitude, longitude: item.longitude });
    setIsModalOpen(false);
  };

  return (
    <View style={styles.block}>
      <View style={styles.container}>
        {/* –ö–∞—Ä—Ç–∞ */}
        <Suspense fallback={<ActivityIndicator size="large" color="#000" />}>
          <MapComponent 
            selectedLocation={selectedLocation} 
            setSelectedLocation={setSelectedLocation} 
            setAddress={setAddress} 
          />
        </Suspense>

        {/* –ö–Ω–æ–ø–∫–∞ "–ú–æ—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è" */}
        <TouchableOpacity
          style={styles.geoButton}
          onPress={() => {
            navigator.geolocation.getCurrentPosition(
              (position) => {
                const { latitude, longitude } = position.coords;
                setSelectedLocation({ latitude, longitude });

                // üî• –¢–µ–ø–µ—Ä—å –º—ã —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                fetchAddressFromCoordinates(latitude, longitude);

                setIsModalOpen(false);
              },
              (error) => console.error(error),
              { enableHighAccuracy: true }
            );
          }}
        >
          <GeoIcon />
        </TouchableOpacity>

        <View style={styles.bottomContainer}>
          {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ) */}
          <TouchableOpacity style={styles.inputContainer} onPress={() => setIsModalOpen(true)}>
            <SearchIcon/>
            <Text style={styles.inputText}>{address || '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å...'}</Text>
          </TouchableOpacity>

          {/* –ö–Ω–æ–ø–∫–∞ "–í—Å—ë –≤–µ—Ä–Ω–æ" */}
          <TouchableOpacity style={styles.button} onPress={() => onNext(selectedLocation || address)}>
            <Text style={styles.buttonText}>–í—Å—ë –≤–µ—Ä–Ω–æ</Text>
          </TouchableOpacity>
        </View>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å `AddressSearch` */}
        <Modal visible={isModalOpen} animationType="slide">
          <View style={styles.modalOpen}>
            <View style={styles.modalContainer}>
              <AddressSearch onSelectAddress={selectAddress} />
              <TouchableOpacity style={styles.button} onPress={() => setIsModalOpen(false)}>
                <Text style={styles.buttonText}>–ó–∞–∫—Ä—ã—Ç—å</Text>
              </TouchableOpacity>
            </View>
          </View>
        </Modal>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  block: { 
    flex: 1, 
    backgroundColor: '#fff' 
  },
  container: { 
    width: '100%', 
    height: '100%', 
    position: 'relative', 
    paddingVertical: 30 
  },
  geoButton: { 
    position: 'absolute', 
    zIndex: 400, 
    right: 16, 
    bottom: '30%' 
  },
  bottomContainer: { 
    borderTopLeftRadius: 16, 
    padding: 16, 
    marginBottom: 10 
  },
  inputContainer: { 
    flexDirection: 'row',
    alignItems: 'center',
    gap: 15,
    backgroundColor: '#f3f3f3', 
    padding: 16, 
    borderRadius: 12, 
    marginBottom: 30 
  },
  inputText: { 
    fontSize: 14, 
    fontWeight: '400', 
    color: '#000' 
  },
  button: { 
    padding: 15, 
    borderRadius: 8, 
    backgroundColor: '#000', 
    width: '100%' 
  },
  modalOpen: { 
    alignItems: 'center', 
    flex: 1 
  },
  modalContainer: { 
    width: '100%', 
    height: '100%', 
    paddingVertical: 30, 
    paddingHorizontal: 16, 
    maxWidth: 600 
  },
  buttonText: { 
    color: '#fff', 
    fontWeight: '700', 
    textAlign: 'center', 
    fontSize: 12 
  },
});

export default MapWeb;
