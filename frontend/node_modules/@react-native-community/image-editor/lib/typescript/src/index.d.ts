import type { ImageCropData, CropResult } from './types.ts';
type CropResultWithoutBase64 = Omit<CropResult, 'base64'>;
type ImageCropDataWithoutBase64 = Omit<ImageCropData, 'includeBase64'>;
declare class ImageEditor {
    /**
     * Crop the image specified by the URI param. If URI points to a remote
     * image, it will be downloaded automatically. If the image cannot be
     * loaded/downloaded, the promise will be rejected. On Android, a
     * downloaded image may be cached in external storage, a publicly accessible
     * location, if it has more available space than internal storage.
     *
     * If the cropping process is successful, the resultant cropped image
     * will be stored in the Cache Path, and the URI returned in the promise
     * will point to the image in the cache path. Remember to delete the
     * cropped image from the cache path when you are done with it.
     */
    static cropImage(uri: string, cropData: ImageCropDataWithoutBase64): Promise<CropResultWithoutBase64>;
    static cropImage(uri: string, cropData: ImageCropDataWithoutBase64 & {
        includeBase64: false;
    }): Promise<CropResultWithoutBase64>;
    static cropImage(uri: string, cropData: ImageCropDataWithoutBase64 & {
        includeBase64: true;
    }): Promise<CropResultWithoutBase64 & {
        base64: string;
    }>;
}
export default ImageEditor;
//# sourceMappingURL=index.d.ts.map