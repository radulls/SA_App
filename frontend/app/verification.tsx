import React, { useState } from 'react';
import { View, ScrollView, StyleSheet, Text, Alert, Platform } from 'react-native';
import VerificationNameForm from '../components/verification/VerificationNameForm';
import VerificationPhotoForm from '../components/verification/VerificationPhotoForm';
import IconBack from '@/components/svgConvertedIcons/iconBack';
import { router } from 'expo-router';
import { patchWithFiles } from '../api/index';
import AsyncStorage from '@react-native-async-storage/async-storage';

const VerificationScreen: React.FC = () => {
  const [step, setStep] = useState<number>(1); // –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —à–∞–≥–æ–≤
  const [verificationData, setVerificationData] = useState({
    firstName: '',
    lastName: '',
    passportPhoto: null,
    selfiePhoto: null,
  });

  const handleDataChange = (data: Partial<typeof verificationData>) => {
    setVerificationData((prev) => ({ ...prev, ...data }));
  };

  const handleSubmitName = async () => {
    try {
      const userId = await AsyncStorage.getItem('userId');
      if (!userId) throw new Error('userId –Ω–µ –Ω–∞–π–¥–µ–Ω');
  
      const formData = new FormData();
      formData.append('userId', userId);
      formData.append('firstName', verificationData.firstName);
      formData.append('lastName', verificationData.lastName);
  
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º FormData:', formData);
  
      const response = await patchWithFiles('/users/verify', formData);

  
      console.log('–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
  
      // Alert.alert('–£—Å–ø–µ—Ö', '–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!');
      setStep(2); // –ü–µ—Ä–µ—Ö–æ–¥ –∫–æ –≤—Ç–æ—Ä–æ–º—É —à–∞–≥—É
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞:', error.message || error.response?.data || error);
      Alert.alert('–û—à–∏–±–∫–∞', error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  };
  
  const handleSubmitPhotos = async () => {
    try {
      const userId = await AsyncStorage.getItem('userId');
      if (!userId) throw new Error('userId –Ω–µ –Ω–∞–π–¥–µ–Ω');
  
      console.log('üì∏ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Ñ–∞–π–ª—ã:', verificationData);
  
      const formData = new FormData();
      formData.append('userId', userId);
  
      // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ FormData
      const appendImageToFormData = async (fileObject: any, fieldName: string) => {
        if (Platform.OS === 'web') {
          const response = await fetch(fileObject.uri);
          const blob = await response.blob();
          const fileType = blob.type.split('/')[1] || 'jpeg';
          const fileName = `${fieldName}.${fileType}`;
          formData.append(fieldName, new File([blob], fileName, { type: blob.type }));
        } else {
          formData.append(fieldName, {
            uri: fileObject.uri,
            name: `${fieldName}.${fileObject.uri.split('.').pop() || 'jpg'}`,
            type: `image/${fileObject.uri.split('.').pop()?.toLowerCase() || 'jpeg'}`,
          } as any);
        }
      };
  
      if (verificationData.passportPhoto) {
        console.log('üì§ –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Å–ø–æ—Ä—Ç–Ω–æ–µ —Ñ–æ—Ç–æ...');
        await appendImageToFormData(verificationData.passportPhoto, 'passportPhoto');
      }
      if (verificationData.selfiePhoto) {
        console.log('üì§ –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª—Ñ–∏...');
        await appendImageToFormData(verificationData.selfiePhoto, 'selfiePhoto');
      }
  
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º FormData:', formData);
  
      const response = await patchWithFiles('/users/verify', formData);
      console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
  
      Alert.alert('–£—Å–ø–µ—Ö', '–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
      router.push('/home');
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message || error.response?.data || error);
      Alert.alert('–û—à–∏–±–∫–∞', error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  };
  

  const renderStepContent = () => {
    if (step === 1) {
      return (
        <VerificationNameForm
          value={{
            firstName: verificationData.firstName,
            lastName: verificationData.lastName,
          }}
          onDataChange={handleDataChange}
          onSubmit={handleSubmitName} // –ü–µ—Ä–µ–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
        />
      );
    }

    if (step === 2) {
      return (
        <VerificationPhotoForm
          value={{
            passportPhoto: verificationData.passportPhoto,
            selfiePhoto: verificationData.selfiePhoto,
          }}
          onDataChange={handleDataChange}
          onSubmit={handleSubmitPhotos} // –ü–µ—Ä–µ–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞
        />
      );
    }
  };

  return (
    <View style={styles.backgroundContainer}>
    <View style={styles.container}>
      <View style={styles.topContainer}>
        <IconBack onPress={() => (step > 1 ? setStep(step - 1) : router.back())} 
        style={styles.iconBack}
        />
       <View style={styles.titleWrapper}> 
        <Text style={styles.headerTitle}>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è</Text>
      </View>
      </View> 
      <ScrollView contentContainerStyle={styles.scrollViewContent}>
        {renderStepContent()}
      </ScrollView>
    </View>
    </View>
  );
};

const styles = StyleSheet.create({
    backgroundContainer: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 100)',
  },
  container: {
    backgroundColor: 'rgba(0, 0, 0, 100)',
    flex: 1,
    width: '100%',
    height: '100%',
    paddingHorizontal: 16,
    maxWidth: 600,
    marginHorizontal: 'auto',
    paddingTop: 58,
  },
  topContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    position: 'relative',
    marginBottom: 40,
  },
  iconBack: {
    width: 32, // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∏–∫–æ–Ω–∫–∏
    zIndex: 20,
  },
  titleWrapper: {
    flex: 1,
    position: 'absolute',
    width: '100%',
    left: 0,
    right: 0,
    alignItems: 'center',
  },
  headerTitle: {
    color: '#fff',
    fontWeight: '700',
    fontSize: 15,
    fontFamily: "SFUIDisplay-bold",
  },
  scrollViewContent: {
    flexGrow: 1,
    width: '100%',
  },
});

export default VerificationScreen;
